<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Byte.Core.Common</name>
    </assembly>
    <members>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            在行为方法执行前执行
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            在行为方法执行后执行
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            在行为方法返回前执行
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            在行为方法返回后执行
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.JsonContent(System.String)">
            <summary>
            返回JSON
            </summary>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.Success">
            <summary>
            返回成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.Success(System.String)">
            <summary>
            返回成功
            </summary>
            <param name="msg">消息</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.Success``1(``0)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回的数据</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.Error">
            <summary>
            返回错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.Error(System.String)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.BaseActionFilter.Error(System.String,System.Int32)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <param name="errorCode">错误代码</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.HostService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            启动任务绑定
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.HostService.DoWork(System.Object)">
            <summary>
            定时执行的操作，绑定到定时器上
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.HostService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            任务关闭时执行
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Attributes.HostService.Dispose">
            <summary>
            释放托管资源，释放时触发
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Attributes.CheckJWTAttribute">
            <summary>
            JWT校验
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Attributes.NoCheckJWTAttribute">
            <summary>
            忽略JWT校验
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Attributes.ShardingTableAttribute.Splitter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Attributes.ShardingTableAttribute.Suffix">
            <summary>
            分表后缀格式。默认值：_yyyyMMdd
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Attributes.FormatResponseAttribute">
            <summary>
            若Action返回对象为自定义对象,则将其转为JSON
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Attributes.NoFormatResponseAttribute">
            <summary>
            返回结果不进行格式化
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Attributes.NoFormatResponseAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Byte.Core.Common.Attributes.NoFormatResponseAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.BloomFilter`1">
            <summary>
            一个布隆过滤器
            </summary>
            <typeparam name="T">泛型数据类型</typeparam>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.BloomFilter`1.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化bloom滤波器并设置hash散列的最佳数目
            </summary>
            <param name="bitSize">布隆过滤器的大小(m)默认为10E消耗100M内存</param>
            <param name="setSize">集合的大小 (n)默认为1000W</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.BloomFilter`1.FalsePositiveProbability">
            <summary>
            计算遇到误检率的概率。
            </summary>
            <returns>Probability of a false positive</returns>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.BloomFilterWithShareMemory`1">
            <summary>
            共享内存布隆过滤器
            </summary>
            <typeparam name="T">泛型数据类型</typeparam>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.BloomFilterWithShareMemory`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            初始化bloom滤波器并设置hash散列的最佳数目
            </summary>
            <param name="bloomName"></param>
            <param name="bitSize">布隆过滤器的大小(m)默认为10E消耗100M内存</param>
            <param name="setSize">集合的大小 (n)默认为1000W</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.BloomFilterWithShareMemory`1.FalsePositiveProbability">
            <summary>
            计算遇到误检率的概率。
            </summary>
            <returns>Probability of a false positive</returns>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.ConsistentHash`1">
            <summary>
            一致性HASH,解决传统HASH的扩容难的问题
            注:常用与分布式缓存与分表
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.ParentChildrenMapping">
            <summary>
            父子数据相互映射类
            注：父子数据都必须唯一,即所有父键唯一,所有子键唯一,唯一的子键能确定对应的父键,唯一的父键能确定其拥有的子键集合,
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.AddChild(System.String,System.String)">
            <summary>
            添加子键
            </summary>
            <param name="parentId">所属父键</param>
            <param name="childId">子键</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.RemoveChild(System.String,System.String)">
            <summary>
            删除子键
            </summary>
            <param name="parentId">所属父键</param>
            <param name="childId">子键</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.RemoveParent(System.String)">
            <summary>
            删除父键
            注:会删除该父键以及该父键下面的所有子键
            </summary>
            <param name="parentId"></param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.ExistsParent(System.String)">
            <summary>
            父键是否存在
            </summary>
            <param name="parentId">父键</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.ExistsChild(System.String)">
            <summary>
            子键是否存在
            </summary>
            <param name="childId">子键</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.GetChildren(System.String)">
            <summary>
            获取父键拥有的所有子键
            </summary>
            <param name="parentId">父键</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.GetAllParents">
            <summary>
            获取所有父键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.GetAllChildren">
            <summary>
            获取所有子键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ParentChildrenMapping.GetParent(System.String)">
            <summary>
            获取父键
            </summary>
            <param name="childId">子键</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.ShareMenmory">
            <summary>
            共享内存
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory.OpenExists(System.String,System.Int64)">
            <summary>
            获取共享内存
            </summary>
            <param name="mapName">内存名</param>
            <param name="Size">大小</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory.Read(System.Int32,System.Int32)">
            <summary>
            从共享内存读数据
            </summary>
            <param name="lngSize">数据长度</param>
            <param name="ofset">指针偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory.Write(System.Byte[],System.Int32)">
            <summary>
            将数据写入内存中
            </summary>
            <param name="bytData">需要写入的数据</param>
            <param name="offset">目的内存地址偏移量</param>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.ShareMenmory`1">
            <summary>
            共享内存之操作泛型实体类
            </summary>
            <typeparam name="T">泛型参数</typeparam>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.OpenExists(System.String,System.Int64)">
            <summary>
            获取共享内存
            </summary>
            <param name="mapName">内存名</param>
            <param name="Size">大小</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.Read(System.Int32,System.Int32)">
            <summary>
            从共享内存读数据
            </summary>
            <param name="lngSize">数据长度</param>
            <param name="ofset">指针偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.Write(System.Byte[],System.Int32)">
            <summary>
            将数据写入内存中
            </summary>
            <param name="bytData">需要写入的数据</param>
            <param name="offset">目的内存地址偏移量</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.GetUrl(System.Int32)">
            <summary>
            获取URL
            </summary>
            <param name="index">所需要获取URL的索引序号</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.SetUrl(System.Int32,System.String)">
            <summary>
            保存URL
            </summary>
            <param name="index">保存的位置（索引序号）</param>
            <param name="url">URL</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.GetState(System.Int32)">
            <summary>
            获取状态
            </summary>
            <param name="index">索引序号</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.SetState(System.Int32,System.Int32)">
            <summary>
            设置状态
            </summary>
            <param name="index">索引序号</param>
            <param name="state">状态（0为未爬取，1为已经爬取）</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.ShareMenmory`1.SetEntity(System.Int32,`0)">
            <summary>
            保存实体类
            </summary>
            <param name="index">索引序号</param>
            <param name="t">实体类型</param>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.TaskQueue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.TaskQueue.#ctor">
            <summary>
            默认队列
            注：默认间隔时间1ms
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.TaskQueue.#ctor(System.TimeSpan)">
            <summary>
            间隔任务队列
            注：每个任务之间间隔一段时间
            </summary>
            <param name="timeSpan">间隔时间</param>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.UsingLock`1">
            <summary>
            使用using代替lock操作的对象,可指定写入和读取锁定模式
            参考:https://www.cnblogs.com/blqw/p/3475734.html
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.UsingLock`1.Lock">
            <summary> 利用IDisposable的using语法糖方便的释放锁定操作
            <para>内部类</para>
            </summary>
        </member>
        <member name="F:Byte.Core.Common.ClassLibrary.UsingLock`1.Lock._Lock">
            <summary> 读写锁对象
            </summary>
        </member>
        <member name="F:Byte.Core.Common.ClassLibrary.UsingLock`1.Lock._IsWrite">
            <summary> 是否为写入模式
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.UsingLock`1.Lock.#ctor(System.Threading.ReaderWriterLockSlim,System.Boolean)">
            <summary> 利用IDisposable的using语法糖方便的释放锁定操作
            <para>构造函数</para>
            </summary>
            <param name="rwl">读写锁</param>
            <param name="isWrite">写入模式为true,读取模式为false</param>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.UsingLock`1.Lock.Dispose">
            <summary> 释放对象时退出指定锁定模式
            </summary>
        </member>
        <member name="T:Byte.Core.Common.ClassLibrary.UsingLock`1.Disposable">
            <summary> 空的可释放对象,免去了调用时需要判断是否为null的问题
            <para>内部类</para>
            </summary>
        </member>
        <member name="F:Byte.Core.Common.ClassLibrary.UsingLock`1.Disposable.Empty">
            <summary> 空的可释放对象
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.UsingLock`1.Disposable.Dispose">
            <summary> 空的释放方法
            </summary>
        </member>
        <member name="F:Byte.Core.Common.ClassLibrary.UsingLock`1._LockSlim">
            <summary> 读写锁
            </summary>
        </member>
        <member name="F:Byte.Core.Common.ClassLibrary.UsingLock`1._Data">
            <summary> 保存数据
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.UsingLock`1.#ctor">
            <summary> 使用using代替lock操作的对象,可指定写入和读取锁定模式
            <para>构造函数</para>
            </summary>
        </member>
        <member name="P:Byte.Core.Common.ClassLibrary.UsingLock`1.Data">
            <summary> 获取或设置当前对象中保存数据的值
            </summary>
            <exception cref="T:System.MemberAccessException">获取数据时未进入读取或写入锁定模式</exception>
            <exception cref="T:System.MemberAccessException">设置数据时未进入写入锁定模式</exception>
        </member>
        <member name="P:Byte.Core.Common.ClassLibrary.UsingLock`1.Enabled">
            <summary> 是否启用,当该值为false时,Read()和Write()方法将返回 Disposable.Empty
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.UsingLock`1.Read">
            <summary> 进入读取锁定模式,该模式下允许多个读操作同时进行
            <para>退出读锁请将返回对象释放,建议使用using语块</para>
            <para>Enabled为false时,返回Disposable.Empty;</para>
            <para>在读取或写入锁定模式下重复执行,返回Disposable.Empty;</para>
            </summary>
        </member>
        <member name="M:Byte.Core.Common.ClassLibrary.UsingLock`1.Write">
            <summary> 进入写入锁定模式,该模式下只允许同时执行一个读操作
            <para>退出读锁请将返回对象释放,建议使用using语块</para>
            <para>Enabled为false时,返回Disposable.Empty;</para>
            <para>在写入锁定模式下重复执行,返回Disposable.Empty;</para>
            </summary>
            <exception cref="T:System.NotImplementedException">读取模式下不能进入写入锁定状态</exception>
        </member>
        <member name="F:Byte.Core.Common.Enums.StateEnum.del">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Byte.Core.Common.Enums.StateEnum.def">
            <summary>
             默认
            </summary>
        </member>
        <member name="F:Byte.Core.Common.Enums.StateEnum.normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ActionExecutingContextExtensions.ContainsFilter``1(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            是否拥有某过滤器
            </summary>
            <typeparam name="T">过滤器类型</typeparam>
            <param name="actionExecutingContext">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.CollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                添加集合到现有集合中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.CollectionExtension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Each 迭代操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.CollectionExtension.ConvertToDictionary``2(System.Collections.Generic.ICollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                将集合转换到 Dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="name">做为键值对 name 的属性。</param>
            <param name="value">做为键值对 value 的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.CollectionExtension.ConvertToNameValueCollection``2(System.Collections.Generic.ICollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取集合的键值对集合
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="source"></param>
            <param name="name">做为键值对 name 的属性。</param>
            <param name="value">做为键值对 value 的属性。</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Extensions.ExpressionExtensions">
            <summary>
            表达式树常用扩展方法
            源自：https://gitee.com/yubaolee/OpenAuth.Net/blob/bestflow/Infrastructure/DynamicLinq.cs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Byte.Core.Common.Extensions.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" -->
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.GenerateBody``1(System.Linq.Expressions.ParameterExpression,Byte.Core.Common.Extensions.Filter)">
            <summary>
            创建linq表达示的body部分
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.GenerateLambda(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            创建完整的lambda
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            拼接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="T:Byte.Core.Common.Extensions.ExpressionExtensions.ParameterRebinder">
            <summary>
            参数重新绑定
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Byte.Core.Common.Extensions.ExpressionExtensions.ParameterRebinder"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ExpressionExtensions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问 <see cref="T:System.Linq.Expressions.ParameterExpression" />。
            </summary>
            <param name="node">要访问的表达式。</param>
            <returns>
            如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。
            </returns>
        </member>
        <member name="T:Byte.Core.Common.Extensions.Extensions">
            <summary>
            对象映射
            </summary>
        </member>
        <member name="F:Byte.Core.Common.Extensions.Extensions.Sync">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:Byte.Core.Common.Extensions.Extensions._config">
            <summary>
            配置提供器
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.MapTo``2(``0,``1)">
            <summary>
            将源对象映射到目标对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="destination">目标对象</param>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.MapTo``1(System.Object)">
            <summary>
            将源对象映射到目标对象
            </summary>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.MapTo``1(System.Object,``0)">
            <summary>
            将源对象映射到目标对象
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.GetType(System.Object)">
            <summary>
            获取类型
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.Exists(System.Type,System.Type)">
            <summary>
            是否已存在映射配置
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.Init(System.Type,System.Type)">
            <summary>
            初始化映射配置
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.GetResult``1(System.Object,``0)">
            <summary>
            获取映射结果
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.Extensions.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            将源集合映射到目标集合
            </summary>
            <typeparam name="TDestination">目标元素类型,范例：Sample,不要加List</typeparam>
            <param name="source">源集合</param>
        </member>
        <member name="T:Byte.Core.Common.Extensions.GenericExtension">
            <summary>
            泛型扩展
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.ParseTo``1(System.String)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回默认值。
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <returns>返回指定的类型。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.ParseTo``1(System.String,``0)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回默认值。
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <param name="defaultValue">如果转换失败，需要使用的默认值</param>
            <returns>返回指定的类型。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.ParseToNullable``1(System.String)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回null
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <returns>返回指定的类型</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.FastClone``2(``0)">
            <summary>
            快速复制
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.Order(System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            对IP地址列表实现排序
            </summary>
            <param name="ips"></param>
            <param name="asc">true为升序，false为降序</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            给IEnumerable拓展ForEach方法
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="iEnumberable">数据源</param>
            <param name="func">方法</param>
        </member>
        <member name="M:Byte.Core.Common.Extensions.GenericExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            给IEnumerable拓展ForEach方法
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="iEnumberable">数据源</param>
            <param name="func">方法</param>
        </member>
        <member name="T:Byte.Core.Common.Extensions.ObjectFastClone`2">
            <summary>
            运用表达式树实现对象的快速复制
            </summary>
            <typeparam name="TIn">目标对象</typeparam>
            <typeparam name="TOut">输出对象</typeparam>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                取得对象指定属性的值
            </summary>
            <param name="predicate">要取值的属性</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetPropertyValue``1(``0,System.String)">
            <summary>
                取对象属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName">支持“.”分隔的多级属性取值。</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.SetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
                设置对象指定属性的值
            </summary>
            <param name="predicate">要设置值的属性</param>
            <param name="value">设置值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
                设置对象属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName">propertyName1.propertyName2.propertyName3</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToList``1(System.Data.DataTable)">
            <summary>
            DataTable转List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Byte.Core.Common.Extensions.ObjectExtension.ChangeType(System.Object,System.Type)" -->
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToDataSet``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToListSet``1(``0,System.Boolean)">
            <summary>
            将实例转换为集合数据集。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToXmlDocument``1(``0)">
            <summary>
            将可序列化实例转换为XmlDocument。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <returns>XmlDocument。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="t">转换的元素类型。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ListToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否转换为字符串形式。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetData(System.Data.DataSet)">
            <summary>
            获取DataSet第一表，第一行，第一列的值。
            </summary>
            <param name="ds">DataSet数据集。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetData(System.Data.DataTable)">
            <summary>
            获取DataTable第一行，第一列的值。
            </summary>
            <param name="dt">DataTable数据集表。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetData(System.Data.DataSet,System.String)">
            <summary>
            获取DataSet第一个匹配columnName的值。
            </summary>
            <param name="ds">数据集。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetData(System.Data.DataTable,System.String)">
            <summary>
            获取DataTable第一个匹配columnName的值。
            </summary>
            <param name="dt">数据表。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToString(System.Object,System.String)">
            <summary>
            将object转换为string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToString(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            将DateTime?转换为string类型信息。
            </summary>
            <param name="o">DateTime?。</param>
            <param name="format">标准或自定义日期和时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToString(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            将TimeSpan?转换为string类型信息。
            </summary>
            <param name="o">TimeSpan?。</param>
            <param name="format">标准或自定义时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToSubString(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            将object转换为截取后的string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
            <param name="length">子字符串中的字符数。</param>
            <param name="suffix">后缀。如果没有截取则不添加。</param>
            <returns>截取后的string类型信息。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToByte(System.Object,System.Byte)">
            <summary>
            将object转换为byte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>byte。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToChar(System.Object,System.Char)">
            <summary>
            将object转换为char类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>char。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToInt(System.Object,System.Int32)">
            <summary>
            将object转换为int类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>int。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToDouble(System.Object,System.Double)">
            <summary>
            将object转换为double类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>double。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将object转换为decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToFloat(System.Object,System.Single)">
            <summary>
            将object转换为float类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>float。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToLong(System.Object,System.Int64)">
            <summary>
            将object转换为long类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>long。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToBool(System.Object,System.Boolean)">
            <summary>
            将object转换为bool类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToSbyte(System.Object,System.SByte)">
            <summary>
            将object转换为sbyte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>sbyte。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToShort(System.Object,System.Int16)">
            <summary>
            将object转换为short类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>short。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToUShort(System.Object,System.UInt16)">
            <summary>
            将object转换为ushort类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ushort。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToULong(System.Object,System.UInt64)">
            <summary>
            将object转换为ulong类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ulong。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToEnum``1(System.Object,``0)">
            <summary>
            将object转换为Enum[T]类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Enum[T]。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为DateTime类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToTimeSpan(System.Object,System.TimeSpan)">
            <summary>
            将object转换为TimeSpan类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>TimeSpan。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToGuid(System.Object,System.Guid)">
            <summary>
            将object转换为Guid类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetBool(System.Object)">
            <summary>
            从object中获取bool类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetInt(System.Object)">
            <summary>
            从object中获取int类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>int。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetDecimal(System.Object)">
            <summary>
            从object中获取decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetDouble(System.Object)">
            <summary>
            从object中获取double类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>double。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetPositiveNumber(System.Object)">
            <summary>
            从object中获取正数信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetDateTime(System.Object)">
            <summary>
            从object中获取DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetTimeSpan(System.Object)">
            <summary>
            从object中获取TimeSpan?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>TimeSpan?。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetGuid(System.Object)">
            <summary>
            从object中获取Guid?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>Guid?。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetSqlDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为SqlServer中的DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.Value(System.Xml.Linq.XElement,System.String)">
            <summary>
            读取XElement节点的文本内容。
            </summary>
            <param name="xElement">XElement节点。</param>
            <param name="t">默认值。</param>
            <returns>文本内容。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetFirstOrDefaultValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关或者第一个的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.Element(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            获取具有指定 System.Xml.Linq.XName 的第一个（按文档顺序）子元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回同名默认值。</param>
            <returns>与指定 System.Xml.Linq.XName 匹配的 System.Xml.Linq.XElement，或者为 null。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的子元素集合。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含此System.Xml.Linq.XContainer 的子元素，或者非空默认值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的经过筛选的子元素集合。集合中只包括具有匹配 System.Xml.Linq.XName 的元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含具有匹配System.Xml.Linq.XName 的 System.Xml.Linq.XContainer 的子级，或者非空默认值。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.RemoveHTMLTags(System.String)">
            <summary>
            删除html标签。
            </summary>
            <param name="html">输入的字符串。</param>
            <returns>没有html标签的字符串。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToFileName(System.String)">
            <summary>
            字符串转换为文件名。
            </summary>
            <param name="s">字符串。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetMonday(System.DateTime)">
            <summary>
            获取星期一的日期。
            </summary>
            <param name="dateTime">日期。</param>
            <returns>星期一的日期。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.DefaultStringIfEmpty(System.String,System.String[])">
            <summary>
            获取默认非空字符串。
            </summary>
            <param name="s">首选默认非空字符串。</param>
            <param name="args">依次非空字符串可选项。</param>
            <returns>默认非空字符串。若无可选项则返回string.Empty。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.Text.RegularExpressions.Regex,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.String,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToUnixTimeStamp(System.DateTime)">
            <summary>
            将日期转换为UNIX时间戳字符串
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToTimeStamp(System.DateTime)">
            <summary>
            将日期转换为时间戳字符串
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.IsMobile(System.String)">
            <summary>
            判断当前字符串是否是移动电话号码
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.IsEmail(System.String)">
            <summary>
            判断当前字符串是否为邮箱
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.RMBD(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToJson(System.Object)">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.IsNullOrEmpty(System.Object)">
            <summary>
            判断是否为Null或者空
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.IsNullOrWhiteSpace(System.Object)">
            <summary>
            判断是否为Null或者空
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.IsNotNull(System.Object)">
            <summary>
            不等于NULL？
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.IsNull(System.Object)">
            <summary>
            等于NULL？
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.EntityToJson(System.Object)">
            <summary>
            实体类转json数据，速度快
            </summary>
            <param name="t">实体类</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.DeepClone``1(``0)">
            <summary>
            深复制
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.Map``2(``1)">
            <summary>
            对象映射(AutoMapper)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TT"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToXmlStr``1(``0)">
            <summary>
            将对象序列化为XML字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ToXmlStr``1(``0,System.String)">
            <summary>
            将对象序列化为XML字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="rootNodeName">根节点名(建议设为xml)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ContainsProperty(System.Object,System.String)">
            <summary>
            是否拥有某属性
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取某属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置某属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ContainsField(System.Object,System.String)">
            <summary>
            是否拥有某字段
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetGetFieldValue(System.Object,System.String)">
            <summary>
            获取某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            设置某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.GetMethod(System.Object,System.String)">
            <summary>
            获取某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="methodName">方法名</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ChangeType``1(System.Object)">
            <summary>
            改变实体类型
            </summary>
            <param name="obj">对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
            <summary>
            改变实体类型
            </summary>
            <typeparam name="T">目标泛型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ObjectExtension.ChangeType_ByConvert(System.Object,System.Type)">
            <summary>
            改变类型
            </summary>
            <param name="obj">原对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Extensions.ServiceExtension">
            <summary>
            IServiceCollection扩展
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ServiceExtension.AddTransientAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            用DI批量注入接口程序集中对应的实现类。
            <para>
            需要注意的是，这里有如下约定：
            IUserService --> UserService, IUserRepository --> UserRepository.
            </para>
            </summary>
            <param name="service"></param>
            <param name="interfaceAssemblyName">接口程序集的名称（不包含文件扩展名）</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ServiceExtension.AddScopedAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String)">
            <summary>
            用DI批量注入接口程序集中对应的实现类。
            </summary>
            <param name="service"></param>
            <param name="interfaceAssemblyName">接口程序集的名称（不包含文件扩展名）</param>
            <param name="implementAssemblyName">实现程序集的名称（不包含文件扩展名）</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ServiceExtension.UseCsRedisClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            使用CSRedis代替StackChange.Redis
            <remarks>
            关于CSRedis项目，请参考<seealso cref="!:https://github.com/2881099/csredis"/>
            </remarks>
            </summary>
            <param name="services"></param>
            <param name="redisConnectionStrings">redis连接字符串。
            <remarks>
            如果是单机模式，请只输入一个连接字符串；如果是集群模式，请输入多个连接字符串
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ServiceExtension.AddCustomController(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String,System.Func{System.Reflection.TypeInfo,System.Boolean})">
            <summary>
            添加自定义Controller。自定义controller项目对应的dll必须复制到程序运行目录
            </summary>
            <param name="builder"></param>
            <param name="controllerAssemblyName">自定义controller文件的名称，比如：xxx.Controllers.dll</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ServiceExtension.AddCustomController(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String,System.String,System.Func{System.Reflection.TypeInfo,System.Boolean})">
            <summary>
            添加自定义Controller
            </summary>
            <param name="builder"></param>
            <param name="controllerAssemblyDir">Controller文件所在路径</param>
            <param name="controllerAssemblyName">Controller文件名称，比如：xxx.Controllers.dll</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.ServiceExtension.AddCoreX(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Action{AspectCore.Configuration.IAspectConfiguration})">
            <summary>
            框架入口。默认开启注入实现了ISingletonDependency、IScopedDependency、ITransientDependency三种不同生命周期的类，以及AddHttpContextAccessor和AddDataProtection。
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <param name="aspectConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToString(System.Byte[])">
            <summary>
            byte[]转string
            注：默认使用UTF8编码
            </summary>
            <param name="bytes">byte[]数组</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ReplaceWhitespace(System.String,System.String)">
            <summary>
                替换空格字符
            </summary>
            <param name="input"></param>
            <param name="replacement">替换为该字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                返回一个值，该值指示指定的 String 对象是否出现在此字符串中。
            </summary>
            <param name="source"></param>
            <param name="value">要搜寻的字符串。</param>
            <param name="comparisonType">指定搜索规则的枚举值之一。</param>
            <returns>如果 value 参数出现在此字符串中则为 true；否则为 false。</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.StripHtml(System.String,System.Int32)">
            <summary>
                清除 Html 代码，并返回指定长度的文本。(连续空行或空格会被替换为一个)
            </summary>
            <param name="text"></param>
            <param name="maxLength">返回的文本长度（为0返回所有文本）</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToBytes_FromBase64Str(System.String)">
            <summary>
            转为字节数组
            </summary>
            <param name="base64Str">base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToMD5String(System.String)">
            <summary>
            转换为MD5加密后的字符串（默认加密为32位）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToMD5String16(System.String)">
            <summary>
            转换为MD5加密后的字符串（16位）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Base64Encode(System.String)">
            <summary>
            Base64加密
            注:默认采用UTF8编码
            </summary>
            <param name="source">待加密的明文</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="source">待加密的明文</param>
            <param name="encoding">加密采用的编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Base64Decode(System.String)">
            <summary>
            Base64解密
            注:默认使用UTF8编码
            </summary>
            <param name="result">待解密的密文</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="result">待解密的密文</param>
            <param name="encoding">解密采用的编码方式，注意和加密时采用的方式一致</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Base64UrlEncode(System.String)">
            <summary>
            Base64Url编码
            </summary>
            <param name="text">待编码的文本字符串</param>
            <returns>编码的文本字符串</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.Base64UrlDecode(System.String)">
            <summary>
            Base64Url解码
            </summary>
            <param name="base64UrlStr">使用Base64Url编码后的字符串</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToSHA1Bytes(System.String)">
            <summary>
            计算SHA1摘要
            注：默认使用UTF8编码
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToSHA1Bytes(System.String,System.Text.Encoding)">
            <summary>
            计算SHA1摘要
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToSHA1String(System.String)">
            <summary>
            转为SHA1哈希加密字符串
            注：默认使用UTF8编码
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToSHA1String(System.String,System.Text.Encoding)">
            <summary>
            转为SHA1哈希
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToSHA256String(System.String)">
            <summary>
            SHA256加密
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToHMACSHA256String(System.String,System.String)">
            <summary>
            HMACSHA256算法
            </summary>
            <param name="text">内容</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToInt(System.String)">
            <summary>
            string转int
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToLong(System.String)">
            <summary>
            string转long
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToInt_FromBinString(System.String)">
            <summary>
            二进制字符串转为Int
            </summary>
            <param name="str">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToInt0X(System.String)">
            <summary>
            将16进制字符串转为Int
            </summary>
            <param name="str">数值</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToBytes(System.String)">
            <summary>
            string转byte[]
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            string转byte[]
            </summary>
            <param name="str">字符串</param>
            <param name="theEncoding">需要的编码</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.To0XBytes(System.String)">
            <summary>
            将16进制字符串转为Byte数组
            </summary>
            <param name="str">16进制字符串(2个16进制字符表示一个Byte)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToASCIIBytes(System.String)">
            <summary>
            将ASCII码形式的字符串转为对应字节数组
            注：一个字节一个ASCII码字符
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToObject``1(System.String)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.RemoveAt(System.String)">
            <summary>
            删除Json字符串中键中的@符号
            </summary>
            <param name="jsonStr">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToObject(System.String,System.Type)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <param name="jsonStr">json字符串</param>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.XmlStrToObject``1(System.String)">
            <summary>
            将XML字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xmlStr">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.XmlStrToJObject(System.String)">
            <summary>
            将XML字符串反序列化为对象
            </summary>
            <param name="xmlStr">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToList``1(System.String)">
            <summary>
            将Json字符串转为List'T'
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToDataTable(System.String)">
            <summary>
            将Json字符串转为DataTable
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToJObject(System.String)">
            <summary>
            将Json字符串转为JObject
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToJArray(System.String)">
            <summary>
            将Json字符串转为JArray
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToEntity``1(System.String)">
            <summary>
            json数据转实体类,仅仅应用于单个实体类，速度非常快
            </summary>
            <typeparam name="T">泛型参数</typeparam>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToFirstUpperStr(System.String)">
            <summary>
            转为首字母大写
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToFirstLowerStr(System.String)">
            <summary>
            转为首字母小写
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToIPEndPoint(System.String)">
            <summary>
            转为网络终结点IPEndPoint
            </summary>=
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.ToMurmurHash(System.String)">
            <summary>
            转为MurmurHash
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Extensions.StringExtensions.IsWeakPwd(System.String)">
            <summary>
            是否为弱密码
            注:密码必须包含数字、小写字母、大写字母和其他符号中的两种并且长度大于8
            </summary>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Extensions.TypeExtension">
            <summary>
            Type类的扩展方法
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Extensions.TypeExtension.IsBulitinType(System.Type)">
            <summary>
            判断是否为基础类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Filters.BusException">
            <summary>
            业务异常
            注:并不会当作真正的异常处理,仅为方便返回前端错误提示信息
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Filters.BusException.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Filters.BusException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Filters.BusException.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="message">错误信息</param>
            <param name="errorCode">错误代码</param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.CommonHelper.NewMongodbId">
            <summary>
            生成类似Mongodb的ObjectId有序、不重复Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.CommonHelper.GetDateDiff(System.DateTime)">
            <summary>
            获取日期差
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.CommonHelper.GetTypeByString(System.String)">
            <summary>
            获得类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.ConfigHelper.GetValue(System.String)">
            <summary>
            从AppSettings获取key的值
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.ConfigHelper.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="nameOfCon">连接字符串名</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Helpers.EntityMapper">
            <summary>
            实体类映射，源自SqlSugar(http://www.codeisbug.com/Doc/3/1113)
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.EntityMapper.ToList``1(System.Data.DataTable)">
            <summary>
            将DataTable转换成泛型对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.HttpHelper.PostAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="paramStr"> 使用tojson 转换</param>
            <param name="headers"></param>
            <param name="encoding"></param>
            <param name="mediaType"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Helpers.JsonConvertor">
            <summary>
            json serialization and deserialization, using Jil.
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.JWTHelper.SetToken(System.String,System.String)">
            <summary>
            生成Token
            </summary>
            <param name="payloadJsonStr">数据JSON字符串</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.JWTHelper.GetToken(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.JWTHelper.GetPayload(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.JWTHelper.GetPayload``1(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.JWTHelper.CheckToken(System.String,System.String)">
            <summary>
            校验Token
            </summary>
            <param name="token">token</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Helpers.LinqHelper">
            <summary>
            Linq操作帮助类
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.LinqHelper.True``1">
            <summary>
            创建初始条件为True的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.LinqHelper.False``1">
            <summary>
            创建初始条件为False的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Helpers.Log4NetHelper">
            <summary>
            log4net封装类
            *********************************使用说明**********************************
            1.首先将配置文件(log4net.config或App.config)放置在程序运行目录
            2.调用SetConfig方法，并传入配置文件的全路径
            3.调用WriteError、WriteInfo、WriteFatal、WriteDebug等方法
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.SetConfig(log4net.Repository.ILoggerRepository,System.String,System.Boolean)">
            <summary>
            读取配置文件，并使其生效。如果未找到配置文件，则抛出异常
            </summary>
            <param name="repository"></param>
            <param name="configFilePath">配置文件全路径</param>
            <param name="useExceptionless">是否启用Exceptionless</param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteError(System.Type,System.Exception)">
            <summary>
            输出错误日志到Log4Net
            </summary>
            <param name="t"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteError(System.Type,System.String)">
            <summary>
            输出错误日志到Log4Net
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteInfo(System.Type,System.String)">
            <summary>
            记录消息日志
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteInfo(System.Type,System.Exception)">
            <summary>
            记录消息日志
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteFatal(System.Type,System.String)">
            <summary>
            记录致命错误日志
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteFatal(System.Type,System.Exception)">
            <summary>
            记录致命错误日志
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteDebug(System.Type,System.String)">
            <summary>
            记录Debug日志
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteDebug(System.Type,System.Exception)">
            <summary>
            记录Debug日志
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteWarn(System.Type,System.String)">
            <summary>
            记录警告信息
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.Log4NetHelper.WriteWarn(System.Type,System.Exception)">
            <summary>
            记录警告信息
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.NPOIHelper.ExportExcel(System.Data.DataTable,System.String)">
            <summary>
            DataTable 导出到 Excel 的 MemoryStream
            </summary>
            <param name="dtSource">源 DataTable</param>
            <param name="strHeaderText">表头文本 空值未不要表头标题</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.NPOIHelper.ExportExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
            DaataTable 导出到 Excel 文件
            </summary>
            <param name="dtSource">源 DataaTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置(文件名及路径)</param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.NPOIHelper.ImportExcel(System.String)">
            <summary>
            读取 excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel 文档路径</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.NPOIHelper.ExportExcel(System.Data.DataSet,System.String)">
            <summary>
            DataSet 导出到 Excel 的 MemoryStream
            </summary>
            <param name="dsSource">源 DataSet</param>
            <param name="strHeaderText">表头文本 空值未不要表头标题(多个表对应多个表头以英文逗号(,)分开，个数应与表相同)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.NPOIHelper.ExportFromDSExcel(NPOI.HSSF.UserModel.HSSFWorkbook,System.Data.DataTable,System.String)">
            <summary>
            DataTable 导出到 Excel 的 MemoryStream
            </summary>
            <param name="workbook">源 workbook</param>
            <param name="dtSource">源 DataTable</param>
            <param name="strHeaderText">表头文本 空值未不要表头标题(多个表对应多个表头以英文逗号(,)分开，个数应与表相同)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.RuntimeHelper.GetAllAssemblies">
            <summary>
            获取项目程序集，排除所有的系统程序集(Microsoft.***、System.***等)、Nuget下载包
            </summary>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Helpers.TreeHelper">
            <summary>
            树结构帮助类
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.TreeHelper.GetTree``2(System.Collections.Generic.List{``0},``1)">
            <summary>
            建造树结构
            </summary>
            <param name="allNodes">所有的节点</param>
            <param name="parentId">父节点</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.TreeHelper.GetChildren``2(System.Collections.Generic.List{``0},``1,System.Nullable{System.Boolean})">
            <summary>
            获取所有子节点
            注：包括自己
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="allNodes">所有节点</param>
            <param name="parentId">父节点</param>
            <param name="isMy">是否包括自己</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.TreeHelper.GetTreeAry``2(System.Collections.Generic.List{``0})">
            <summary>
            递归数组扁平化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="allNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.TreeHelper._GetChildren``2(System.Collections.Generic.List{``0},``0)">
            <summary>
            获取所有子节点
            </summary>
            <typeparam name="T">树模型（TreeModel或继承它的模型）</typeparam>
            <param name="nodes">所有节点列表</param>
            <param name="parentNode">父节点Id</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.TreeHelper.HaveChildren``2(System.Collections.Generic.List{``0},``1)">
            <summary>
            判断当前节点是否有子节点
            </summary>
            <typeparam name="T">树模型</typeparam>
            <param name="nodes">所有节点</param>
            <param name="nodeId">当前节点Id</param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.Helpers.XmlCommentHelper">
            <summary>
            注释辅助类
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.LoadAll">
            <summary>
            从当前dll文件中加载所有的xml文件
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.LoadXml(System.String[])">
            <summary>
            从xml中加载
            </summary>
            <param name="xmls"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.Load(System.String[])">
            <summary>
            从文件中加载
            </summary>
            <param name="xmlFiles"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.Load(System.IO.Stream[])">
            <summary>
            从流中加载
            </summary>
            <param name="streams"></param>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetTypeComment(System.Type,System.String,System.Boolean)">
            <summary>
            读取类型中的注释
            </summary>
            <param name="type">类型</param>
            <param name="xPath">注释路径</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetFieldOrPropertyComment(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
            读取字段或者属性的注释
            </summary>
            <param name="fieldOrPropertyInfo">字段或者属性</param>
            <param name="xPath">注释路径</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetMethodComment(System.Reflection.MethodInfo,System.String,System.Boolean)">
            <summary>
            读取方法中的注释
            </summary>
            <param name="methodInfo">方法</param>
            <param name="xPath">注释路径</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetMethodReturnComment(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            读取方法中的返回值注释
            </summary>
            <param name="methodInfo">方法</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetParameterComment(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            读取参数的注释
            </summary>
            <param name="parameterInfo">参数</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetParameterComments(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            读取方法的所有参数的注释
            </summary>
            <param name="methodInfo">方法</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetComment(System.String,System.String,System.Boolean)">
            <summary>
            读取指定名称节点的注释
            </summary>
            <param name="name">节点名称</param>
            <param name="xPath">注释路径</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetSummary(System.String,System.Boolean)">
            <summary>
            读取指定节点的summary注释
            </summary>
            <param name="name">节点名称</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetExample(System.String,System.Boolean)">
            <summary>
            读取指定节点的example注释
            </summary>
            <param name="name">节点名称</param>
            <param name="humanize">可读性优化(比如：去掉xml标记)</param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetMemberNameForMethod(System.Reflection.MethodInfo)">
            <summary>
            获取方法的节点名称
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetMemberNameForType(System.Type)">
            <summary>
            获取类型的节点名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Byte.Core.Common.Helpers.XmlCommentHelper.GetMemberNameForFieldOrProperty(System.Reflection.MemberInfo)">
            <summary>
            获取字段或者属性的节点名称
            </summary>
            <param name="fieldOrPropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Byte.Core.Common.IoC.AutofacContainer">
            <summary>
            Autofac IOC 容器
            </summary>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Register(System.String[])">
            <summary>
            注册程序集
            </summary>
            <param name="assemblies">程序集名称的集合</param>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Register(System.Type[])">
            <summary>
            注册类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Register(System.String,System.String)">
            <summary>
            注册程序集。
            </summary>
            <param name="implementationAssemblyName"></param>
            <param name="interfaceAssemblyName"></param>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Register``2">
            <summary>
            注册
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Register``1(``0)">
            <summary>
            注册一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AspectCore.Configuration.IAspectConfiguration})">
            <summary>
            构建IOC容器，需在各种Register后调用。
            </summary>
        </member>
        <member name="M:Byte.Core.Common.IoC.AutofacContainer.Resolve``1">
            <summary>
            Resolve an instance of the default requested type from the container
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="P:Byte.Core.Common.Models.PaginationResult.total">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.PaginationResult.pageSize">
            <summary>
            每页条数
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.PaginationResult.pageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.PaginationResult.pageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Models.TreeModel`1">
            <summary>
            树模型（可以作为父类）
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.TreeModel`1.Id">
            <summary>
            唯一标识Id
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.TreeModel`1.Label">
            <summary>
            数据名
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.TreeModel`1.ParentId">
            <summary>
            父级Id
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.TreeModel`1.Level">
            <summary>
            节点深度
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.TreeModel`1.Text">
            <summary>
            显示的内容
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Models.TreeModel`1.Children">
            <summary>
            节点
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Web.CorsMiddleware">
            <summary>
            跨域中间件
            </summary>
        </member>
        <member name="M:Byte.Core.Common.Web.CorsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            管道执行到该中间件时候下一个中间件的RequestDelegate请求委托，如果有其它参数，也同样通过注入的方式获得
            </summary>
            <param name="next">下一个处理者</param>
        </member>
        <member name="M:Byte.Core.Common.Web.CorsMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            自定义中间件要执行的逻辑
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserOID">
            <summary>
            用户主键
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserId">
             <summary>
            用户编号 
             </summary>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserName">
            <summary>
            用户姓名
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserAccount">
            <summary>
            用户登录账户
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserImage">
            <summary>
            用户头像地址
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserRole">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="P:Byte.Core.Common.Web.CurrentUser.UserPage">
            <summary>
            主页地址
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Web.IOperator">
            <summary>
            操作者
            </summary>
        </member>
        <member name="T:Byte.Core.Common.Web.Operator">
            <summary>
            操作者
            </summary>
        </member>
    </members>
</doc>
