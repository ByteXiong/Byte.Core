/* tslint:disable */
/* eslint-disable */
/**
 * runtest开发接口文档 Web端网站 - version 1.0
 *
 *
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type DeptTypeEnum = 10 | 20 | 30;
export type RoleTypeEnum = 10 | 20 | 30 | 40;
export type LayoutTypeEnum = 1 | 2;
export type MenuTypeEnum = 1 | 2 | 3 | 4;
export type IconTypeEnum = 1 | 2;
export type Menu = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 菜单名
   */
  name?: string;
  /**
   * 路径
   */
  path?: string;
  /**
   * 路径
   */
  pathParam?: string;
  layout?: LayoutTypeEnum;
  /**
   * 重定向
   */
  redirect?: string;
  /**
   * 组件
   */
  component?: string;
  /**
   * 父级
   */
  parentId?: number;
  menuType?: MenuTypeEnum;
  iconType?: IconTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 路由标题(可用来作document.title或者菜单的名称)
   */
  title?: string;
  /**
   * 多语言
   */
  i18nKey?: string;
  /**
   * 缓存页面
   */
  keepAlive?: boolean;
  /**
   * 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
   */
  constant?: boolean;
  /**
   * 菜单和面包屑对应的图标
   */
  icon?: string;
  /**
   * 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
   */
  localIcon?: string;
  /**
   * 菜单和面包屑对应的图标的字体大小
   */
  iconFontSize?: number;
  /**
   * 路由顺序，可用于菜单的排序
   */
  order?: number;
  /**
   * 外链链接
   */
  href?: string;
  /**
   * 是否在菜单中隐藏路线
   */
  hideInMenu?: boolean;
  /**
   * 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
   */
  activeMenu?: string;
  /**
   * 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
   */
  multiTab?: boolean;
  /**
   * 如果设置，路线将固定在制表符中，值是固定制表符的顺序
   */
  fixedIndexInTab?: number;
  props?: boolean;
  /**
   * 是否已删除
   */
  isDeleted?: boolean;
  roles?: Role[];
  children?: Menu[];
};
export type Role = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 角色名称
   */
  name?: string;
  type?: RoleTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 角色代码
   */
  code?: string;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 公司id
   */
  deptId?: number;
  /**
   * 部门
   */
  dept?: Dept;
  menus?: Menu[];
  users?: User[];
};
export type DbType =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23
  | 24
  | 25
  | 900;
export type Tenant = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 配置Id
   */
  connId?: string;
  dbType?: DbType;
  /**
   * 状态
   */
  enabled?: boolean;
  /**
   * 命中率
   */
  hitRate?: number;
  /**
   * 数据库链接
   */
  connectionString?: string;
  /**
   * 排序
   */
  orderNo?: number;
  depts?: Dept[];
};
export type Dept = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 图标
   */
  image?: string;
  /**
   * 单位名称
   */
  name?: string;
  /**
   * 简写名称
   */
  easyName?: string;
  /**
   * 父级部门ID
   */
  parentId?: number;
  /**
   * 地址
   */
  address?: string;
  /**
   * 是否删除
   */
  isDeleted?: boolean;
  /**
   * 默认联系电话
   */
  phone?: string;
  /**
   * 默认联系人
   */
  man?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 首页
   */
  home?: string;
  type?: DeptTypeEnum;
  users?: User[];
  roles?: Role[];
  children?: Dept[];
  tenants?: Tenant[];
};
export type User = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 昵称
   */
  nickName?: string;
  /**
   * 头像
   */
  avatar?: string;
  /**
   * 手机号
   */
  phone?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 密码
   */
  password?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 账号
   */
  userName?: string;
  /**
   * 用户部门关系
   */
  depts?: Dept[];
  roles?: Role[];
};
export type DeptInfo = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 图标
   */
  image?: string;
  /**
   * 单位名称
   */
  name?: string;
  /**
   * 简写名称
   */
  easyName?: string;
  /**
   * 父级部门ID
   */
  parentId?: number;
  /**
   * 地址
   */
  address?: string;
  /**
   * 是否删除
   */
  isDeleted?: boolean;
  /**
   * 默认联系电话
   */
  phone?: string;
  /**
   * 默认联系人
   */
  man?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 首页
   */
  home?: string;
  type?: DeptTypeEnum;
  users?: User[];
  roles?: Role[];
  children?: Dept[];
  tenants?: Tenant[];
};
export type DeptTreeDTO = {
  id?: number;
  /**
   * 图标
   */
  image?: string;
  /**
   * 单位名称
   */
  name?: string;
  /**
   * 简写名称
   */
  easyName?: string;
  /**
   * 父级部门ID
   */
  parentId?: number;
  /**
   * 地址
   */
  address?: string;
  /**
   * 是否删除
   */
  isDeleted?: boolean;
  /**
   * 默认联系电话
   */
  phone?: string;
  /**
   * 默认联系人
   */
  man?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 排序
   */
  sort?: number;
  type?: DeptTypeEnum;
  children?: DeptTreeDTO[];
};
export type DeptSelectDTO = {
  /**
   * 主键Id!
   */
  id?: number;
  /**
   * 父级
   */
  parentId?: number;
  /**
   * 菜单
   */
  name?: string;
  /**
   * 图标
   */
  icon?: string;
  children?: DeptSelectDTO[];
};
export type UpdateDeptParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 图标
   */
  image?: string;
  /**
   * 单位名称
   */
  name?: string;
  /**
   * 简写名称
   */
  easyName?: string;
  /**
   * 父级部门ID
   */
  parentId?: number;
  /**
   * 地址
   */
  address?: string;
  /**
   * 是否删除
   */
  isDeleted?: boolean;
  /**
   * 默认联系电话
   */
  phone?: string;
  /**
   * 默认联系人
   */
  man?: string;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 首页
   */
  home?: string;
  type?: DeptTypeEnum;
  users?: User[];
  roles?: Role[];
  children?: Dept[];
  tenants?: Tenant[];
  /**
   * 验证码
   */
  msgCode?: number;
};
export type DicDataSelectDTO = {
  label?: string;
  value?: string;
};
export type JobDetailInfo = object;
export type PagerInfo = {
  totalRowCount?: number;
  pageSize?: number;
  startIndex?: number;
  pageIndex?: number;
  hasPrev?: boolean;
  hasNext?: boolean;
  isFirst?: boolean;
  isLast?: boolean;
  totalPageCount?: number;
};
export type JobDetailDTO = {
  /**
   * 组名称
   */
  groupName?: string;
  /**
   * 程序集Name
   */
  assemblyName?: string;
};
export type JobDetailDTOPagedResults = {
  pagerInfo?: PagerInfo;
  data?: JobDetailDTO[];
};
export type TriggerActionEnum = 1 | 2 | 3 | 4 | 5 | 6;
export type JobCreateTypeEnum = 1 | 2 | 3;
export type ClusterStatus = 0 | 1 | 2;
export type TriggerTypeEnum = 1 | 2 | 3 | 4;
export type TriggerStateEnum = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;
export type JobTriggerRecord = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 当前运行次数
   */
  numberOfRuns?: number;
  /**
   * 最近运行时间
   */
  lastRunTime?: number;
  /**
   * 下一次运行时间
   */
  nextRunTime?: number;
  /**
   * 作业触发器状态
   */
  status?: TriggerStateEnum;
  /**
   * 本次执行结果
   */
  result?: string;
  /**
   * 本次执行耗时
   */
  elapsedTime?: number;
  /**
   * 触发器Id
   */
  triggerId?: number;
  /**
   * 系统作业触发器表
   */
  trigger?: JobTrigger;
};
export type JobTrigger = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 名称
   */
  groupName?: string;
  triggerType?: TriggerTypeEnum;
  /**
   * 程序集
   */
  assemblyName?: string;
  /**
   * 参数
   */
  props?: string;
  /**
   * 描述信息
   */
  description?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 起始时间
   */
  startTime?: number;
  /**
   * 结束时间
   */
  endTime?: number;
  /**
   * 最近运行时间
   */
  lastRunTime?: number;
  /**
   * 下一次运行时间
   */
  nextRunTime?: number;
  /**
   * 触发次数
   */
  numberOfRuns?: number;
  /**
   * 最大触发次数（0:不限制，n:N次）
   */
  maxNumberOfRuns?: number;
  /**
   * 出错次数
   */
  numberOfErrors?: number;
  /**
   * 最大出错次数（0:不限制，n:N次）
   */
  maxNumberOfErrors?: number;
  /**
   * 重试次数
   */
  numRetries?: number;
  /**
   * 重试间隔时间（ms）
   */
  retryTimeout?: number;
  /**
   * 是否立即启动
   */
  startNow?: boolean;
  /**
   * 是否启动时执行一次
   */
  runOnStart?: boolean;
  /**
   * 是否在启动时重置最大触发次数等于一次的作业
   */
  resetOnlyOnce?: boolean;
  /**
   * 任务Id
   */
  jobId?: number;
  /**
   * 作业触发器状态
   */
  state?: TriggerStateEnum;
  /**
   * 系统作业信息表
   */
  detail?: JobDetail;
  /**
   * 触发器
   */
  records?: JobTriggerRecord[];
};
export type JobDetail = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 组名称
   */
  groupName?: string;
  /**
   * 作业类型FullName
   */
  jobType?: string;
  /**
   * 程序集Name
   */
  assemblyName?: string;
  /**
   * 描述信息
   */
  description?: string;
  /**
   * 是否并行执行
   */
  concurrent?: boolean;
  /**
   * 是否扫描特性触发器
   */
  includeAnnotation?: boolean;
  /**
   * 额外数据
   */
  props?: string;
  /**
   * 作业创建类型枚举
   */
  type?: JobCreateTypeEnum;
  /**
   * 脚本代码
   */
  scriptCode?: string;
  /**
   * 集群Id
   */
  clusterId?: number;
  /**
   * 系统作业集群表
   */
  cluster?: JobCluster;
  /**
   * 触发器
   */
  triggers?: JobTrigger[];
};
export type JobCluster = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 分组
   */
  groupName?: string;
  /**
   * 描述信息
   */
  description?: string;
  status?: ClusterStatus;
  /**
   * 集群
   */
  details?: JobDetail[];
};
export type UpdateJobDetailParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 组名称
   */
  groupName?: string;
  /**
   * 作业类型FullName
   */
  jobType?: string;
  /**
   * 程序集Name
   */
  assemblyName?: string;
  /**
   * 描述信息
   */
  description?: string;
  /**
   * 是否并行执行
   */
  concurrent?: boolean;
  /**
   * 是否扫描特性触发器
   */
  includeAnnotation?: boolean;
  /**
   * 额外数据
   */
  props?: string;
  /**
   * 作业创建类型枚举
   */
  type?: JobCreateTypeEnum;
  /**
   * 脚本代码
   */
  scriptCode?: string;
  /**
   * 集群Id
   */
  clusterId?: number;
  /**
   * 系统作业集群表
   */
  cluster?: JobCluster;
  /**
   * 触发器
   */
  triggers?: JobTrigger[];
};
export type JobTriggerInfo = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 名称
   */
  groupName?: string;
  triggerType?: TriggerTypeEnum;
  /**
   * 程序集
   */
  assemblyName?: string;
  /**
   * 参数
   */
  props?: string;
  /**
   * 描述信息
   */
  description?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 起始时间
   */
  startTime?: number;
  /**
   * 结束时间
   */
  endTime?: number;
  /**
   * 最近运行时间
   */
  lastRunTime?: number;
  /**
   * 下一次运行时间
   */
  nextRunTime?: number;
  /**
   * 触发次数
   */
  numberOfRuns?: number;
  /**
   * 最大触发次数（0:不限制，n:N次）
   */
  maxNumberOfRuns?: number;
  /**
   * 出错次数
   */
  numberOfErrors?: number;
  /**
   * 最大出错次数（0:不限制，n:N次）
   */
  maxNumberOfErrors?: number;
  /**
   * 重试次数
   */
  numRetries?: number;
  /**
   * 重试间隔时间（ms）
   */
  retryTimeout?: number;
  /**
   * 是否立即启动
   */
  startNow?: boolean;
  /**
   * 是否启动时执行一次
   */
  runOnStart?: boolean;
  /**
   * 是否在启动时重置最大触发次数等于一次的作业
   */
  resetOnlyOnce?: boolean;
  /**
   * 任务Id
   */
  jobId?: number;
  /**
   * 作业触发器状态
   */
  state?: TriggerStateEnum;
  /**
   * 系统作业信息表
   */
  detail?: JobDetail;
  /**
   * 触发器
   */
  records?: JobTriggerRecord[];
};
export type JobTriggerDTO = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 名称
   */
  groupName?: string;
  triggerType?: TriggerTypeEnum;
  /**
   * 程序集
   */
  assemblyName?: string;
  /**
   * 参数
   */
  props?: string;
  /**
   * 描述信息
   */
  description?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 起始时间
   */
  startTime?: number;
  /**
   * 结束时间
   */
  endTime?: number;
  /**
   * 最近运行时间
   */
  lastRunTime?: number;
  /**
   * 下一次运行时间
   */
  nextRunTime?: number;
  /**
   * 触发次数
   */
  numberOfRuns?: number;
  /**
   * 最大触发次数（0:不限制，n:N次）
   */
  maxNumberOfRuns?: number;
  /**
   * 出错次数
   */
  numberOfErrors?: number;
  /**
   * 最大出错次数（0:不限制，n:N次）
   */
  maxNumberOfErrors?: number;
  /**
   * 重试次数
   */
  numRetries?: number;
  /**
   * 重试间隔时间（ms）
   */
  retryTimeout?: number;
  /**
   * 是否立即启动
   */
  startNow?: boolean;
  /**
   * 是否启动时执行一次
   */
  runOnStart?: boolean;
  /**
   * 是否在启动时重置最大触发次数等于一次的作业
   */
  resetOnlyOnce?: boolean;
  /**
   * 任务Id
   */
  jobId?: number;
  /**
   * 作业触发器状态
   */
  state?: TriggerStateEnum;
  /**
   * 系统作业信息表
   */
  detail?: JobDetail;
  /**
   * 触发器
   */
  records?: JobTriggerRecord[];
};
export type JobTriggerDTOPagedResults = {
  pagerInfo?: PagerInfo;
  data?: JobTriggerDTO[];
};
export type UpdateJobTriggerParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 名称
   */
  groupName?: string;
  triggerType?: TriggerTypeEnum;
  /**
   * 程序集
   */
  assemblyName?: string;
  /**
   * 参数
   */
  props?: string;
  /**
   * 描述信息
   */
  description?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 起始时间
   */
  startTime?: number;
  /**
   * 结束时间
   */
  endTime?: number;
  /**
   * 最近运行时间
   */
  lastRunTime?: number;
  /**
   * 下一次运行时间
   */
  nextRunTime?: number;
  /**
   * 触发次数
   */
  numberOfRuns?: number;
  /**
   * 最大触发次数（0:不限制，n:N次）
   */
  maxNumberOfRuns?: number;
  /**
   * 出错次数
   */
  numberOfErrors?: number;
  /**
   * 最大出错次数（0:不限制，n:N次）
   */
  maxNumberOfErrors?: number;
  /**
   * 重试次数
   */
  numRetries?: number;
  /**
   * 重试间隔时间（ms）
   */
  retryTimeout?: number;
  /**
   * 是否立即启动
   */
  startNow?: boolean;
  /**
   * 是否启动时执行一次
   */
  runOnStart?: boolean;
  /**
   * 是否在启动时重置最大触发次数等于一次的作业
   */
  resetOnlyOnce?: boolean;
  /**
   * 任务Id
   */
  jobId?: number;
  /**
   * 作业触发器状态
   */
  state?: TriggerStateEnum;
  /**
   * 系统作业信息表
   */
  detail?: JobDetail;
  /**
   * 触发器
   */
  records?: JobTriggerRecord[];
};
export type LoginInfoDTO = {
  /**
   * 主键Id!
   */
  id?: number;
  /**
   * 名称
   */
  name?: string;
  /**
   * 头像
   */
  avatar?: string;
  /**
   * 账号
   */
  userName?: string;
  roles?: string[];
  buttons?: string[];
};
export type LoginToken = {
  /**
   * 授权token
   */
  accessToken?: string;
  /**
   * 过期时间
   */
  expires?: number;
  /**
   * 类型
   */
  tokenType?: string;
  /**
   * 刷新token
   */
  refreshToken?: string;
  /**
   * 允许token时间内
   */
  refreshTokenExpires?: number;
};
export type LoginParam = {
  /**
   * 账号
   */
  userName?: string;
  /**
   * 密码
   */
  password?: string;
  captchaId?: string;
  captchaCode?: string;
};
export type SetPasswordParam = {
  /**
   * Id
   */
  id?: number;
  /**
   * 旧密码
   */
  oldPassword?: string;
  /**
   * 新密码
   */
  newPassword?: string;
};
export type MenuQuery = {
  id?: number;
  /**
   * 父级Id
   */
  parentId?: number;
  key?: string;
  value?: string;
  /**
   * 状态
   */
  status?: boolean;
};
export type RouteMeta = {
  /**
   * 路由标题(可用来作document.title或者菜单的名称)
   */
  title?: string;
  /**
   * 多语言
   */
  i18nKey?: string;
  /**
   * 权限标识
   */
  roles?: string[];
  /**
   * 缓存页面
   */
  keepAlive?: boolean;
  /**
   * 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
   */
  constant?: boolean;
  /**
   * 菜单和面包屑对应的图标
   */
  icon?: string;
  /**
   * 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
   */
  localIcon?: string;
  /**
   * 菜单和面包屑对应的图标的字体大小
   */
  iconFontSize?: number;
  /**
   * 路由顺序，可用于菜单的排序
   */
  order?: number;
  /**
   * 外链链接
   */
  href?: string;
  /**
   * 是否在菜单中隐藏路线
   */
  hideInMenu?: boolean;
  /**
   * 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
   */
  activeMenu?: string;
  /**
   * 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
   */
  multiTab?: boolean;
  /**
   * 如果设置，路线将固定在制表符中，值是固定制表符的顺序
   */
  fixedIndexInTab?: number;
  /**
   * 跳转参数
   */
  query?: MenuQuery[];
};
export type RouteDTO = {
  id?: number;
  /**
   * 菜单名
   */
  name?: string;
  /**
   * 路径
   */
  path?: string;
  /**
   * 重定向
   */
  redirect?: string;
  /**
   * 组件
   */
  component?: string;
  /**
   * 父级
   */
  parentId?: number;
  type?: MenuTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  meta?: RouteMeta;
  props?: boolean;
  /**
   * 子节点
   */
  children?: RouteDTO[];
};
export type MenuButton = {
  id?: number;
  /**
   * 按钮编码
   */
  code?: string;
  /**
   * 描述
   */
  desc?: string;
  /**
   * 父级Id
   */
  parentId?: number;
  /**
   * 状态
   */
  status?: boolean;
};
export type MenuInfo = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 菜单名
   */
  name?: string;
  /**
   * 路径
   */
  path?: string;
  /**
   * 路径
   */
  pathParam?: string;
  layout?: LayoutTypeEnum;
  /**
   * 重定向
   */
  redirect?: string;
  /**
   * 组件
   */
  component?: string;
  /**
   * 父级
   */
  parentId?: number;
  menuType?: MenuTypeEnum;
  iconType?: IconTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 路由标题(可用来作document.title或者菜单的名称)
   */
  title?: string;
  /**
   * 多语言
   */
  i18nKey?: string;
  /**
   * 缓存页面
   */
  keepAlive?: boolean;
  /**
   * 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
   */
  constant?: boolean;
  /**
   * 菜单和面包屑对应的图标
   */
  icon?: string;
  /**
   * 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
   */
  localIcon?: string;
  /**
   * 菜单和面包屑对应的图标的字体大小
   */
  iconFontSize?: number;
  /**
   * 路由顺序，可用于菜单的排序
   */
  order?: number;
  /**
   * 外链链接
   */
  href?: string;
  /**
   * 是否在菜单中隐藏路线
   */
  hideInMenu?: boolean;
  /**
   * 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
   */
  activeMenu?: string;
  /**
   * 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
   */
  multiTab?: boolean;
  /**
   * 如果设置，路线将固定在制表符中，值是固定制表符的顺序
   */
  fixedIndexInTab?: number;
  props?: boolean;
  /**
   * 是否已删除
   */
  isDeleted?: boolean;
  roles?: Role[];
  children?: Menu[];
  buttons?: MenuButton[];
  querys?: MenuQuery[];
};
export type MyRouteDTO = {
  home?: string;
  routes?: RouteDTO[];
};
export type MenuTreeDTO = {
  id?: number;
  /**
   * 菜单标题
   */
  title?: string;
  /**
   * 路由名称
   */
  name?: string;
  /**
   * 父级菜单ID
   */
  parentId?: number;
  /**
   * 排序
   */
  order?: number;
  /**
   * icon图标
   */
  icon?: string;
  menuType?: MenuTypeEnum;
  /**
   * 是否隐藏
   */
  hideInMenu?: boolean;
  /**
   * 跳转路由
   */
  redirect?: string;
  /**
   * 根目录始终显示
   */
  alwaysShow?: boolean;
  /**
   * 状态
   */
  status?: boolean;
  children?: MenuTreeDTO[];
};
export type MenuSelectDTO = {
  /**
   * 主键Id!
   */
  id?: number;
  /**
   * 父级
   */
  parentId?: number;
  /**
   * 菜单
   */
  title?: string;
  /**
   * 图标
   */
  icon?: string;
  children?: MenuSelectDTO[];
};
export type RouteSelectDTO = {
  id?: number;
  /**
   * 父级ID
   */
  parentId?: number;
  /**
   * 标题
   */
  title?: string;
  menuType?: MenuTypeEnum;
  children?: RouteSelectDTO[];
};
export type SetByRoleIdDTO = {
  roleId?: number;
  menuIds?: number[];
};
export type UpdateMenuParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 菜单名
   */
  name?: string;
  /**
   * 路径
   */
  path?: string;
  /**
   * 路径
   */
  pathParam?: string;
  layout?: LayoutTypeEnum;
  /**
   * 重定向
   */
  redirect?: string;
  /**
   * 组件
   */
  component?: string;
  /**
   * 父级
   */
  parentId?: number;
  menuType?: MenuTypeEnum;
  iconType?: IconTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 路由标题(可用来作document.title或者菜单的名称)
   */
  title?: string;
  /**
   * 多语言
   */
  i18nKey?: string;
  /**
   * 缓存页面
   */
  keepAlive?: boolean;
  /**
   * 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
   */
  constant?: boolean;
  /**
   * 菜单和面包屑对应的图标
   */
  icon?: string;
  /**
   * 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
   */
  localIcon?: string;
  /**
   * 菜单和面包屑对应的图标的字体大小
   */
  iconFontSize?: number;
  /**
   * 路由顺序，可用于菜单的排序
   */
  order?: number;
  /**
   * 外链链接
   */
  href?: string;
  /**
   * 是否在菜单中隐藏路线
   */
  hideInMenu?: boolean;
  /**
   * 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
   */
  activeMenu?: string;
  /**
   * 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
   */
  multiTab?: boolean;
  /**
   * 如果设置，路线将固定在制表符中，值是固定制表符的顺序
   */
  fixedIndexInTab?: number;
  props?: boolean;
  /**
   * 是否已删除
   */
  isDeleted?: boolean;
  roles?: Role[];
  children?: Menu[];
  buttons?: MenuButton[];
  querys?: MenuQuery[];
};
export type DayRankDTO = {
  /**
   * 排名
   */
  sort?: number;
  /**
   * 赢
   */
  win?: number;
  /**
   * 宝石数
   */
  gems?: number;
  /**
   * 用户ID
   */
  userId?: number;
  /**
   * 昵称
   */
  nickName?: string;
  /**
   * 等级
   */
  vip?: string;
};
export type SetWinParam = {
  type?: number;
  date?: string;
  userId?: number;
  /**
   * 赢
   */
  newWin?: number;
  /**
   * 宝石数
   */
  newGems?: number;
};
export type WeekRankDTO = {
  /**
   * 排名
   */
  sort?: number;
  /**
   * 赢
   */
  win?: number;
  /**
   * 宝石数
   */
  gems?: number;
  /**
   * 用户ID
   */
  userId?: number;
  /**
   * 昵称
   */
  nickName?: string;
  /**
   * 等级
   */
  vip?: string;
};
export type RoleInfo = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 角色名称
   */
  name?: string;
  type?: RoleTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 角色代码
   */
  code?: string;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 公司id
   */
  deptId?: number;
  /**
   * 部门
   */
  dept?: Dept;
  menus?: Menu[];
  users?: User[];
  menuIds?: number[];
};
export type RoleDTO = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 角色名称
   */
  name?: string;
  type?: RoleTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 角色代码
   */
  code?: string;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 公司id
   */
  deptId?: number;
  /**
   * 部门
   */
  dept?: Dept;
  menus?: Menu[];
  users?: User[];
  /**
   * 组织名称
   */
  deptName?: string;
};
export type RoleDTOPagedResults = {
  pagerInfo?: PagerInfo;
  data?: RoleDTO[];
};
export type RoleSelectDTO = {
  /**
   * 主键Id!
   */
  id?: number;
  /**
   * 账号
   */
  name?: string;
};
export type UpdateRoleParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 角色名称
   */
  name?: string;
  type?: RoleTypeEnum;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 备注
   */
  remark?: string;
  /**
   * 角色代码
   */
  code?: string;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 公司id
   */
  deptId?: number;
  /**
   * 部门
   */
  dept?: Dept;
  menus?: Menu[];
  users?: User[];
  /**
   * 菜单
   */
  menuIds?: number[];
};
export type ShaTotalDTO = {
  /**
   * 日期
   */
  date?: string;
  /**
   * 场次
   */
  count?: number;
  /**
   * 总投入
   */
  betting_Coin_Total?: number;
  /**
   * 总获得
   */
  win_Total?: number;
  /**
   * 玩家获得
   */
  user_Win_Total?: number;
  /**
   * 机器人获取
   */
  robot_Mian_Total?: number;
  /**
   * 总损失
   */
  lose_Total?: number;
  /**
   * 玩家损失
   */
  user_Lose_Total?: number;
  /**
   * 机器人损失
   */
  robot_Lose_Total?: number;
  /**
   * 平台抽成
   */
  fee_Total?: number;
};
export type ShaTotalDTOPagedResults = {
  pagerInfo?: PagerInfo;
  data?: ShaTotalDTO[];
};
export type ShaUserTotalDTO = {
  id?: number;
  /**
   * 昵称
   */
  nickname?: string;
  /**
   * 手机号
   */
  tel_Num?: string;
  /**
   * 区号
   */
  tel_Area_Code?: string;
  /**
   * 投注次数
   */
  total_Betting_Coin?: number;
  /**
   * 投注金额
   */
  total_Betting?: number;
  /**
   * 赢
   */
  total_Win?: number;
  /**
   * 输
   */
  total_Lose?: number;
};
export type ShaUserTotalDTOPagedResults = {
  pagerInfo?: PagerInfo;
  data?: ShaUserTotalDTO[];
};
export type ObjectPagedResults = {
  pagerInfo?: PagerInfo;
  data?: unknown[];
};
export type ViewTypeEnum = 1 | 2 | 3;
export type ConditionalType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
export type ColumnTypeEnum = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 50 | 99;
export type TableColumn = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 视图Id
   */
  viewId?: number;
  /**
   * 字段名称
   */
  title?: string;
  /**
   * 字段
   */
  key?: string;
  searchType?: ConditionalType;
  columnType?: ColumnTypeEnum;
  /**
   * 字段描述
   */
  columnTypeDetail?: string;
  /**
   * 字段验证
   */
  columnTypeRules?: string;
  /**
   * 是否自定义
   */
  isCustom?: boolean;
  /**
   * 排序
   */
  sort?: number;
  /**
   * 是否隐藏
   */
  isShow?: boolean;
  /**
   * 多余参数
   */
  props?: string;
  /**
   * 表格重写
   */
  tableView?: TableView;
};
export type TableView = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 表名
   */
  tableof?: string;
  /**
   * 路由
   */
  router?: string;
  type?: ViewTypeEnum;
  /**
   * 默认排序字段
   */
  sortKey?: string;
  /**
   * 排序排序方式
   */
  sortOrder?: string;
  /**
   * 多余参数
   */
  props?: string;
  /**
   * 多余参数
   */
  configId?: string;
  /**
   * 字段
   */
  tableColumns?: TableColumn[];
};
export type SetPropsParam = {
  /**
   * 字段Id
   */
  columnId?: number;
  /**
   * 字段
   */
  props?: string;
};
export type TableSortParam = {
  id?: number;
  sort?: number;
};
export type UpdateTableViewParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 表名
   */
  tableof?: string;
  /**
   * 路由
   */
  router?: string;
  type?: ViewTypeEnum;
  /**
   * 默认排序字段
   */
  sortKey?: string;
  /**
   * 排序排序方式
   */
  sortOrder?: string;
  /**
   * 多余参数
   */
  props?: string;
  /**
   * 多余参数
   */
  configId?: string;
  /**
   * 字段
   */
  tableColumns?: TableColumn[];
};
export type UserInfo = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 昵称
   */
  nickName?: string;
  /**
   * 头像
   */
  avatar?: string;
  /**
   * 手机号
   */
  phone?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 密码
   */
  password?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 账号
   */
  userName?: string;
  /**
   * 用户部门关系
   */
  depts?: Dept[];
  roles?: Role[];
  roleIds?: number[];
};
export type UserDTO = {
  id?: number;
  /**
   * 昵称
   */
  nickName?: string;
  /**
   * 头像
   */
  avatar?: string;
  /**
   * 手机号
   */
  phone?: string;
  /**
   * 电子邮箱
   */
  email?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 账号
   */
  userName?: string;
};
export type UserDTOPagedResults = {
  pagerInfo?: PagerInfo;
  data?: UserDTO[];
};
export type UpdateUserParam = {
  /**
   * 主键
   */
  id?: number;
  /**
   * 创建者名称
   */
  createBy?: string;
  /**
   * 创建时间
   */
  createTime?: number;
  /**
   * 更新者名称
   */
  updateBy?: string;
  /**
   * 最后更新时间
   */
  updateTime?: number;
  /**
   * 昵称
   */
  nickName?: string;
  /**
   * 头像
   */
  avatar?: string;
  /**
   * 手机号
   */
  phone?: string;
  /**
   * 邮箱
   */
  email?: string;
  /**
   * 状态
   */
  status?: boolean;
  /**
   * 账号
   */
  userName?: string;
  /**
   * 用户部门关系
   */
  depts?: Dept[];
  roles?: Role[];
  roleIds?: number[];
  password?: string;
};
declare global {
  interface Apis {
    Dept: {
      /**
       * ---
       *
       * [DELETE] 删除
       *
       * **path:** /api/Dept/Delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_dept_delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Dept.delete_api_dept_delete',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/Dept/GetInfo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 部门 详情
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 图标
       *     image?: string
       *     // 单位名称
       *     name?: string
       *     // 简写名称
       *     easyName?: string
       *     // 父级部门ID
       *     parentId?: number
       *     // 地址
       *     address?: string
       *     // 是否删除
       *     isDeleted?: boolean
       *     // 默认联系电话
       *     phone?: string
       *     // 默认联系人
       *     man?: string
       *     // 备注
       *     remark?: string
       *     // 状态
       *     status?: boolean
       *     // 排序
       *     sort?: number
       *     // 首页
       *     home?: string
       *     type?: 10 | 20 | 30
       *     users?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 昵称
       *       nickName?: string
       *       // 头像
       *       avatar?: string
       *       // 手机号
       *       phone?: string
       *       // 邮箱
       *       email?: string
       *       // 密码
       *       password?: string
       *       // 状态
       *       status?: boolean
       *       // 账号
       *       userName?: string
       *       // 用户部门关系
       *       depts?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 图标
       *         image?: string
       *         // 单位名称
       *         name?: string
       *         // 简写名称
       *         easyName?: string
       *         // 父级部门ID
       *         parentId?: number
       *         // 地址
       *         address?: string
       *         // 是否删除
       *         isDeleted?: boolean
       *         // 默认联系电话
       *         phone?: string
       *         // 默认联系人
       *         man?: string
       *         // 备注
       *         remark?: string
       *         // 状态
       *         status?: boolean
       *         // 排序
       *         sort?: number
       *         // 首页
       *         home?: string
       *         type?: DeptTypeEnum
       *         users?: Array<User>
       *         roles?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 角色名称
       *           name?: string
       *           type?: 10 | 20 | 30 | 40
       *           // 状态
       *           status?: boolean
       *           // 备注
       *           remark?: string
       *           // 角色代码
       *           code?: string
       *           // 排序
       *           sort?: number
       *           // 公司id
       *           deptId?: number
       *           // 部门
       *           dept?: Dept
       *           menus?: Array<{
       *             // 主键
       *             id?: number
       *             // 创建者名称
       *             createBy?: string
       *             // 创建时间
       *             createTime?: number
       *             // 更新者名称
       *             updateBy?: string
       *             // 最后更新时间
       *             updateTime?: number
       *             // 菜单名
       *             name?: string
       *             // 路径
       *             path?: string
       *             // 路径
       *             pathParam?: string
       *             layout?: 1 | 2
       *             // 重定向
       *             redirect?: string
       *             // 组件
       *             component?: string
       *             // 父级
       *             parentId?: number
       *             menuType?: 1 | 2 | 3 | 4
       *             iconType?: 1 | 2
       *             // 状态
       *             status?: boolean
       *             // 路由标题(可用来作document.title或者菜单的名称)
       *             title?: string
       *             // 多语言
       *             i18nKey?: string
       *             // 缓存页面
       *             keepAlive?: boolean
       *             // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *             constant?: boolean
       *             // 菜单和面包屑对应的图标
       *             icon?: string
       *             // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *             localIcon?: string
       *             // 菜单和面包屑对应的图标的字体大小
       *             iconFontSize?: number
       *             // 路由顺序，可用于菜单的排序
       *             order?: number
       *             // 外链链接
       *             href?: string
       *             // 是否在菜单中隐藏路线
       *             hideInMenu?: boolean
       *             // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *             activeMenu?: string
       *             // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *             multiTab?: boolean
       *             // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *             fixedIndexInTab?: number
       *             props?: boolean
       *             // 是否已删除
       *             isDeleted?: boolean
       *             roles?: Array<Role>
       *             children?: Array<Menu>
       *           }>
       *           users?: Array<User>
       *         }>
       *         children?: Array<Dept>
       *         tenants?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 配置Id
       *           connId?: string
       *           dbType?:
       *             | 0
       *             | 1
       *             | 2
       *             | 3
       *             | 4
       *             | 5
       *             | 6
       *             | 7
       *             | 8
       *             | 9
       *             | 10
       *             | 11
       *             | 12
       *             | 13
       *             | 14
       *             | 15
       *             | 16
       *             | 17
       *             | 18
       *             | 19
       *             | 20
       *             | 21
       *             | 22
       *             | 23
       *             | 24
       *             | 25
       *             | 900
       *           // 状态
       *           enabled?: boolean
       *           // 命中率
       *           hitRate?: number
       *           // 数据库链接
       *           connectionString?: string
       *           // 排序
       *           orderNo?: number
       *           depts?: Array<Dept>
       *         }>
       *       }>
       *       roles?: Array<Role>
       *     }>
       *     roles?: Array<Role>
       *     children?: Array<Dept>
       *     tenants?: Array<Tenant>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_dept_getinfo<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 部门 详情
           * [required]
           */
          data: DeptInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 部门 详情
           * [required]
           */
          data: DeptInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Dept.get_api_dept_getinfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] 树图
       *
       * **path:** /api/Dept/GetTree
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     id?: number
       *     // 图标
       *     image?: string
       *     // 单位名称
       *     name?: string
       *     // 简写名称
       *     easyName?: string
       *     // 父级部门ID
       *     parentId?: number
       *     // 地址
       *     address?: string
       *     // 是否删除
       *     isDeleted?: boolean
       *     // 默认联系电话
       *     phone?: string
       *     // 默认联系人
       *     man?: string
       *     // 备注
       *     remark?: string
       *     // 状态
       *     status?: boolean
       *     // 排序
       *     sort?: number
       *     type?: 10 | 20 | 30
       *     children?: Array<DeptTreeDTO>
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_dept_gettree<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DeptTreeDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DeptTreeDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Dept.get_api_dept_gettree',
        Config
      >;
      /**
       * ---
       *
       * [GET] 下拉框
       *
       * **path:** /api/Dept/GetTreeSelect
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   types?: (10 | 20 | 30)[]
       *   parentId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     // 主键Id!
       *     id?: number
       *     // 父级
       *     parentId?: number
       *     // 菜单
       *     name?: string
       *     // 图标
       *     icon?: string
       *     children?: Array<DeptSelectDTO>
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_dept_gettreeselect<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DeptSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            types?: DeptTypeEnum[];
            parentId?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DeptSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Dept.get_api_dept_gettreeselect',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置状态
       *
       * **path:** /api/Dept/SetStatus
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       *   status?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_dept_setstatus<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
            status?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Dept.put_api_dept_setstatus',
        Config
      >;
      /**
       * ---
       *
       * [POST] 提交
       *
       * **path:** /api/Dept/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 图标
       *   image?: string
       *   // 单位名称
       *   name?: string
       *   // 简写名称
       *   easyName?: string
       *   // 父级部门ID
       *   parentId?: number
       *   // 地址
       *   address?: string
       *   // 是否删除
       *   isDeleted?: boolean
       *   // 默认联系电话
       *   phone?: string
       *   // 默认联系人
       *   man?: string
       *   // 备注
       *   remark?: string
       *   // 状态
       *   status?: boolean
       *   // 排序
       *   sort?: number
       *   // 首页
       *   home?: string
       *   type?: 10 | 20 | 30
       *   users?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 昵称
       *     nickName?: string
       *     // 头像
       *     avatar?: string
       *     // 手机号
       *     phone?: string
       *     // 邮箱
       *     email?: string
       *     // 密码
       *     password?: string
       *     // 状态
       *     status?: boolean
       *     // 账号
       *     userName?: string
       *     // 用户部门关系
       *     depts?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 图标
       *       image?: string
       *       // 单位名称
       *       name?: string
       *       // 简写名称
       *       easyName?: string
       *       // 父级部门ID
       *       parentId?: number
       *       // 地址
       *       address?: string
       *       // 是否删除
       *       isDeleted?: boolean
       *       // 默认联系电话
       *       phone?: string
       *       // 默认联系人
       *       man?: string
       *       // 备注
       *       remark?: string
       *       // 状态
       *       status?: boolean
       *       // 排序
       *       sort?: number
       *       // 首页
       *       home?: string
       *       type?: DeptTypeEnum
       *       users?: Array<User>
       *       roles?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 角色名称
       *         name?: string
       *         type?: 10 | 20 | 30 | 40
       *         // 状态
       *         status?: boolean
       *         // 备注
       *         remark?: string
       *         // 角色代码
       *         code?: string
       *         // 排序
       *         sort?: number
       *         // 公司id
       *         deptId?: number
       *         // 部门
       *         dept?: Dept
       *         menus?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 菜单名
       *           name?: string
       *           // 路径
       *           path?: string
       *           // 路径
       *           pathParam?: string
       *           layout?: 1 | 2
       *           // 重定向
       *           redirect?: string
       *           // 组件
       *           component?: string
       *           // 父级
       *           parentId?: number
       *           menuType?: 1 | 2 | 3 | 4
       *           iconType?: 1 | 2
       *           // 状态
       *           status?: boolean
       *           // 路由标题(可用来作document.title或者菜单的名称)
       *           title?: string
       *           // 多语言
       *           i18nKey?: string
       *           // 缓存页面
       *           keepAlive?: boolean
       *           // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *           constant?: boolean
       *           // 菜单和面包屑对应的图标
       *           icon?: string
       *           // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *           localIcon?: string
       *           // 菜单和面包屑对应的图标的字体大小
       *           iconFontSize?: number
       *           // 路由顺序，可用于菜单的排序
       *           order?: number
       *           // 外链链接
       *           href?: string
       *           // 是否在菜单中隐藏路线
       *           hideInMenu?: boolean
       *           // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *           activeMenu?: string
       *           // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *           multiTab?: boolean
       *           // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *           fixedIndexInTab?: number
       *           props?: boolean
       *           // 是否已删除
       *           isDeleted?: boolean
       *           roles?: Array<Role>
       *           children?: Array<Menu>
       *         }>
       *         users?: Array<User>
       *       }>
       *       children?: Array<Dept>
       *       tenants?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 配置Id
       *         connId?: string
       *         dbType?:
       *           | 0
       *           | 1
       *           | 2
       *           | 3
       *           | 4
       *           | 5
       *           | 6
       *           | 7
       *           | 8
       *           | 9
       *           | 10
       *           | 11
       *           | 12
       *           | 13
       *           | 14
       *           | 15
       *           | 16
       *           | 17
       *           | 18
       *           | 19
       *           | 20
       *           | 21
       *           | 22
       *           | 23
       *           | 24
       *           | 25
       *           | 900
       *         // 状态
       *         enabled?: boolean
       *         // 命中率
       *         hitRate?: number
       *         // 数据库链接
       *         connectionString?: string
       *         // 排序
       *         orderNo?: number
       *         depts?: Array<Dept>
       *       }>
       *     }>
       *     roles?: Array<Role>
       *   }>
       *   roles?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 角色名称
       *     name?: string
       *     type?: 10 | 20 | 30 | 40
       *     // 状态
       *     status?: boolean
       *     // 备注
       *     remark?: string
       *     // 角色代码
       *     code?: string
       *     // 排序
       *     sort?: number
       *     // 公司id
       *     deptId?: number
       *     // 部门
       *     dept?: Dept
       *     menus?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 菜单名
       *       name?: string
       *       // 路径
       *       path?: string
       *       // 路径
       *       pathParam?: string
       *       layout?: 1 | 2
       *       // 重定向
       *       redirect?: string
       *       // 组件
       *       component?: string
       *       // 父级
       *       parentId?: number
       *       menuType?: 1 | 2 | 3 | 4
       *       iconType?: 1 | 2
       *       // 状态
       *       status?: boolean
       *       // 路由标题(可用来作document.title或者菜单的名称)
       *       title?: string
       *       // 多语言
       *       i18nKey?: string
       *       // 缓存页面
       *       keepAlive?: boolean
       *       // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *       constant?: boolean
       *       // 菜单和面包屑对应的图标
       *       icon?: string
       *       // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *       localIcon?: string
       *       // 菜单和面包屑对应的图标的字体大小
       *       iconFontSize?: number
       *       // 路由顺序，可用于菜单的排序
       *       order?: number
       *       // 外链链接
       *       href?: string
       *       // 是否在菜单中隐藏路线
       *       hideInMenu?: boolean
       *       // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *       activeMenu?: string
       *       // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *       multiTab?: boolean
       *       // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *       fixedIndexInTab?: number
       *       props?: boolean
       *       // 是否已删除
       *       isDeleted?: boolean
       *       roles?: Array<Role>
       *       children?: Array<Menu>
       *     }>
       *     users?: Array<User>
       *   }>
       *   children?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 图标
       *     image?: string
       *     // 单位名称
       *     name?: string
       *     // 简写名称
       *     easyName?: string
       *     // 父级部门ID
       *     parentId?: number
       *     // 地址
       *     address?: string
       *     // 是否删除
       *     isDeleted?: boolean
       *     // 默认联系电话
       *     phone?: string
       *     // 默认联系人
       *     man?: string
       *     // 备注
       *     remark?: string
       *     // 状态
       *     status?: boolean
       *     // 排序
       *     sort?: number
       *     // 首页
       *     home?: string
       *     type?: DeptTypeEnum
       *     users?: Array<User>
       *     roles?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 角色名称
       *       name?: string
       *       type?: 10 | 20 | 30 | 40
       *       // 状态
       *       status?: boolean
       *       // 备注
       *       remark?: string
       *       // 角色代码
       *       code?: string
       *       // 排序
       *       sort?: number
       *       // 公司id
       *       deptId?: number
       *       // 部门
       *       dept?: Dept
       *       menus?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 菜单名
       *         name?: string
       *         // 路径
       *         path?: string
       *         // 路径
       *         pathParam?: string
       *         layout?: 1 | 2
       *         // 重定向
       *         redirect?: string
       *         // 组件
       *         component?: string
       *         // 父级
       *         parentId?: number
       *         menuType?: 1 | 2 | 3 | 4
       *         iconType?: 1 | 2
       *         // 状态
       *         status?: boolean
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         props?: boolean
       *         // 是否已删除
       *         isDeleted?: boolean
       *         roles?: Array<Role>
       *         children?: Array<Menu>
       *       }>
       *       users?: Array<User>
       *     }>
       *     children?: Array<Dept>
       *     tenants?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 配置Id
       *       connId?: string
       *       dbType?:
       *         | 0
       *         | 1
       *         | 2
       *         | 3
       *         | 4
       *         | 5
       *         | 6
       *         | 7
       *         | 8
       *         | 9
       *         | 10
       *         | 11
       *         | 12
       *         | 13
       *         | 14
       *         | 15
       *         | 16
       *         | 17
       *         | 18
       *         | 19
       *         | 20
       *         | 21
       *         | 22
       *         | 23
       *         | 24
       *         | 25
       *         | 900
       *       // 状态
       *       enabled?: boolean
       *       // 命中率
       *       hitRate?: number
       *       // 数据库链接
       *       connectionString?: string
       *       // 排序
       *       orderNo?: number
       *       depts?: Array<Dept>
       *     }>
       *   }>
       *   tenants?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 配置Id
       *     connId?: string
       *     dbType?:
       *       | 0
       *       | 1
       *       | 2
       *       | 3
       *       | 4
       *       | 5
       *       | 6
       *       | 7
       *       | 8
       *       | 9
       *       | 10
       *       | 11
       *       | 12
       *       | 13
       *       | 14
       *       | 15
       *       | 16
       *       | 17
       *       | 18
       *       | 19
       *       | 20
       *       | 21
       *       | 22
       *       | 23
       *       | 24
       *       | 25
       *       | 900
       *     // 状态
       *     enabled?: boolean
       *     // 命中率
       *     hitRate?: number
       *     // 数据库链接
       *     connectionString?: string
       *     // 排序
       *     orderNo?: number
       *     depts?: Array<Dept>
       *   }>
       *   // 验证码
       *   msgCode?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_dept_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateDeptParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Dept.post_api_dept_submit',
        Config
      >;
    };
    DicData: {
      /**
       * ---
       *
       * [GET] 获取所有分组
       *
       * **path:** /api/DicData/GetAllGroupBy
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: string[]
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_dicdata_getallgroupby<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: string[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: string[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'DicData.get_api_dicdata_getallgroupby',
        Config
      >;
      /**
       * ---
       *
       * [GET] 获取下拉
       *
       * **path:** /api/DicData/GetSelect
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   groupBy?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     label?: string
       *     value?: string
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_dicdata_getselect<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DicDataSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            groupBy?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DicDataSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'DicData.get_api_dicdata_getselect',
        Config
      >;
    };
    JobDetail: {
      /**
       * ---
       *
       * [DELETE] 删除
       *
       * **path:** /api/JobDetail/Delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_jobdetail_delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobDetail.delete_api_jobdetail_delete',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/JobDetail/GetInfo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: object
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_jobdetail_getinfo<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobDetailInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobDetailInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobDetail.get_api_jobdetail_getinfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] 分页
       *
       * **path:** /api/JobDetail/GetPage
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: Array<{
       *       // 组名称
       *       groupName?: string
       *       // 程序集Name
       *       assemblyName?: string
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_jobdetail_getpage<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobDetailDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobDetailDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobDetail.get_api_jobdetail_getpage',
        Config
      >;
      /**
       * ---
       *
       * [POST] 全局启动
       *
       * **path:** /api/JobDetail/SetAllState
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = 1 | 2 | 3 | 4 | 5 | 6
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_jobdetail_setallstate<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: TriggerActionEnum;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobDetail.post_api_jobdetail_setallstate',
        Config
      >;
      /**
       * ---
       *
       * [POST] 新增
       *
       * **path:** /api/JobDetail/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 组名称
       *   groupName?: string
       *   // 作业类型FullName
       *   jobType?: string
       *   // 程序集Name
       *   assemblyName?: string
       *   // 描述信息
       *   description?: string
       *   // 是否并行执行
       *   concurrent?: boolean
       *   // 是否扫描特性触发器
       *   includeAnnotation?: boolean
       *   // 额外数据
       *   props?: string
       *   // 作业创建类型枚举
       *   type?: 1 | 2 | 3
       *   // 脚本代码
       *   scriptCode?: string
       *   // 集群Id
       *   clusterId?: number
       *   // 系统作业集群表
       *   cluster?: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 分组
       *     groupName?: string
       *     // 描述信息
       *     description?: string
       *     status?: 0 | 1 | 2
       *     // 集群
       *     details?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 组名称
       *       groupName?: string
       *       // 作业类型FullName
       *       jobType?: string
       *       // 程序集Name
       *       assemblyName?: string
       *       // 描述信息
       *       description?: string
       *       // 是否并行执行
       *       concurrent?: boolean
       *       // 是否扫描特性触发器
       *       includeAnnotation?: boolean
       *       // 额外数据
       *       props?: string
       *       // 作业创建类型枚举
       *       type?: JobCreateTypeEnum
       *       // 脚本代码
       *       scriptCode?: string
       *       // 集群Id
       *       clusterId?: number
       *       // 系统作业集群表
       *       cluster?: JobCluster
       *       // 触发器
       *       triggers?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 名称
       *         groupName?: string
       *         triggerType?: 1 | 2 | 3 | 4
       *         // 程序集
       *         assemblyName?: string
       *         // 参数
       *         props?: string
       *         // 描述信息
       *         description?: string
       *         // 状态
       *         status?: boolean
       *         // 起始时间
       *         startTime?: number
       *         // 结束时间
       *         endTime?: number
       *         // 最近运行时间
       *         lastRunTime?: number
       *         // 下一次运行时间
       *         nextRunTime?: number
       *         // 触发次数
       *         numberOfRuns?: number
       *         // 最大触发次数（0:不限制，n:N次）
       *         maxNumberOfRuns?: number
       *         // 出错次数
       *         numberOfErrors?: number
       *         // 最大出错次数（0:不限制，n:N次）
       *         maxNumberOfErrors?: number
       *         // 重试次数
       *         numRetries?: number
       *         // 重试间隔时间（ms）
       *         retryTimeout?: number
       *         // 是否立即启动
       *         startNow?: boolean
       *         // 是否启动时执行一次
       *         runOnStart?: boolean
       *         // 是否在启动时重置最大触发次数等于一次的作业
       *         resetOnlyOnce?: boolean
       *         // 任务Id
       *         jobId?: number
       *         // 作业触发器状态
       *         state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *         // 系统作业信息表
       *         detail?: JobDetail
       *         // 触发器
       *         records?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 当前运行次数
       *           numberOfRuns?: number
       *           // 最近运行时间
       *           lastRunTime?: number
       *           // 下一次运行时间
       *           nextRunTime?: number
       *           // 作业触发器状态
       *           status?: TriggerStateEnum
       *           // 本次执行结果
       *           result?: string
       *           // 本次执行耗时
       *           elapsedTime?: number
       *           // 触发器Id
       *           triggerId?: number
       *           // 系统作业触发器表
       *           trigger?: JobTrigger
       *         }>
       *       }>
       *     }>
       *   }
       *   // 触发器
       *   triggers?: Array<JobTrigger>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_jobdetail_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateJobDetailParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobDetail.post_api_jobdetail_submit',
        Config
      >;
    };
    JobTrigger: {
      /**
       * ---
       *
       * [DELETE] 删除
       *
       * **path:** /api/JobTrigger/Delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_jobtrigger_delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobTrigger.delete_api_jobtrigger_delete',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/JobTrigger/GetInfo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 名称
       *     groupName?: string
       *     triggerType?: 1 | 2 | 3 | 4
       *     // 程序集
       *     assemblyName?: string
       *     // 参数
       *     props?: string
       *     // 描述信息
       *     description?: string
       *     // 状态
       *     status?: boolean
       *     // 起始时间
       *     startTime?: number
       *     // 结束时间
       *     endTime?: number
       *     // 最近运行时间
       *     lastRunTime?: number
       *     // 下一次运行时间
       *     nextRunTime?: number
       *     // 触发次数
       *     numberOfRuns?: number
       *     // 最大触发次数（0:不限制，n:N次）
       *     maxNumberOfRuns?: number
       *     // 出错次数
       *     numberOfErrors?: number
       *     // 最大出错次数（0:不限制，n:N次）
       *     maxNumberOfErrors?: number
       *     // 重试次数
       *     numRetries?: number
       *     // 重试间隔时间（ms）
       *     retryTimeout?: number
       *     // 是否立即启动
       *     startNow?: boolean
       *     // 是否启动时执行一次
       *     runOnStart?: boolean
       *     // 是否在启动时重置最大触发次数等于一次的作业
       *     resetOnlyOnce?: boolean
       *     // 任务Id
       *     jobId?: number
       *     // 作业触发器状态
       *     state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *     // 系统作业信息表
       *     detail?: {
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 组名称
       *       groupName?: string
       *       // 作业类型FullName
       *       jobType?: string
       *       // 程序集Name
       *       assemblyName?: string
       *       // 描述信息
       *       description?: string
       *       // 是否并行执行
       *       concurrent?: boolean
       *       // 是否扫描特性触发器
       *       includeAnnotation?: boolean
       *       // 额外数据
       *       props?: string
       *       // 作业创建类型枚举
       *       type?: JobCreateTypeEnum
       *       // 脚本代码
       *       scriptCode?: string
       *       // 集群Id
       *       clusterId?: number
       *       // 系统作业集群表
       *       cluster?: JobCluster
       *       // 触发器
       *       triggers?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 名称
       *         groupName?: string
       *         triggerType?: 1 | 2 | 3 | 4
       *         // 程序集
       *         assemblyName?: string
       *         // 参数
       *         props?: string
       *         // 描述信息
       *         description?: string
       *         // 状态
       *         status?: boolean
       *         // 起始时间
       *         startTime?: number
       *         // 结束时间
       *         endTime?: number
       *         // 最近运行时间
       *         lastRunTime?: number
       *         // 下一次运行时间
       *         nextRunTime?: number
       *         // 触发次数
       *         numberOfRuns?: number
       *         // 最大触发次数（0:不限制，n:N次）
       *         maxNumberOfRuns?: number
       *         // 出错次数
       *         numberOfErrors?: number
       *         // 最大出错次数（0:不限制，n:N次）
       *         maxNumberOfErrors?: number
       *         // 重试次数
       *         numRetries?: number
       *         // 重试间隔时间（ms）
       *         retryTimeout?: number
       *         // 是否立即启动
       *         startNow?: boolean
       *         // 是否启动时执行一次
       *         runOnStart?: boolean
       *         // 是否在启动时重置最大触发次数等于一次的作业
       *         resetOnlyOnce?: boolean
       *         // 任务Id
       *         jobId?: number
       *         // 作业触发器状态
       *         state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *         // 系统作业信息表
       *         detail?: JobDetail
       *         // 触发器
       *         records?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 当前运行次数
       *           numberOfRuns?: number
       *           // 最近运行时间
       *           lastRunTime?: number
       *           // 下一次运行时间
       *           nextRunTime?: number
       *           // 作业触发器状态
       *           status?: TriggerStateEnum
       *           // 本次执行结果
       *           result?: string
       *           // 本次执行耗时
       *           elapsedTime?: number
       *           // 触发器Id
       *           triggerId?: number
       *           // 系统作业触发器表
       *           trigger?: JobTrigger
       *         }>
       *       }>
       *     }
       *     // 触发器
       *     records?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 当前运行次数
       *       numberOfRuns?: number
       *       // 最近运行时间
       *       lastRunTime?: number
       *       // 下一次运行时间
       *       nextRunTime?: number
       *       // 作业触发器状态
       *       status?: TriggerStateEnum
       *       // 本次执行结果
       *       result?: string
       *       // 本次执行耗时
       *       elapsedTime?: number
       *       // 触发器Id
       *       triggerId?: number
       *       // 系统作业触发器表
       *       trigger?: JobTrigger
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_jobtrigger_getinfo<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobTriggerInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobTriggerInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobTrigger.get_api_jobtrigger_getinfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] 分页
       *
       * **path:** /api/JobTrigger/GetPage
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   KeyWord?: string
       *   JobId?: number
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 名称
       *       groupName?: string
       *       triggerType?: 1 | 2 | 3 | 4
       *       // 程序集
       *       assemblyName?: string
       *       // 参数
       *       props?: string
       *       // 描述信息
       *       description?: string
       *       // 状态
       *       status?: boolean
       *       // 起始时间
       *       startTime?: number
       *       // 结束时间
       *       endTime?: number
       *       // 最近运行时间
       *       lastRunTime?: number
       *       // 下一次运行时间
       *       nextRunTime?: number
       *       // 触发次数
       *       numberOfRuns?: number
       *       // 最大触发次数（0:不限制，n:N次）
       *       maxNumberOfRuns?: number
       *       // 出错次数
       *       numberOfErrors?: number
       *       // 最大出错次数（0:不限制，n:N次）
       *       maxNumberOfErrors?: number
       *       // 重试次数
       *       numRetries?: number
       *       // 重试间隔时间（ms）
       *       retryTimeout?: number
       *       // 是否立即启动
       *       startNow?: boolean
       *       // 是否启动时执行一次
       *       runOnStart?: boolean
       *       // 是否在启动时重置最大触发次数等于一次的作业
       *       resetOnlyOnce?: boolean
       *       // 任务Id
       *       jobId?: number
       *       // 作业触发器状态
       *       state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *       // 系统作业信息表
       *       detail?: {
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 组名称
       *         groupName?: string
       *         // 作业类型FullName
       *         jobType?: string
       *         // 程序集Name
       *         assemblyName?: string
       *         // 描述信息
       *         description?: string
       *         // 是否并行执行
       *         concurrent?: boolean
       *         // 是否扫描特性触发器
       *         includeAnnotation?: boolean
       *         // 额外数据
       *         props?: string
       *         // 作业创建类型枚举
       *         type?: JobCreateTypeEnum
       *         // 脚本代码
       *         scriptCode?: string
       *         // 集群Id
       *         clusterId?: number
       *         // 系统作业集群表
       *         cluster?: JobCluster
       *         // 触发器
       *         triggers?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 名称
       *           groupName?: string
       *           triggerType?: 1 | 2 | 3 | 4
       *           // 程序集
       *           assemblyName?: string
       *           // 参数
       *           props?: string
       *           // 描述信息
       *           description?: string
       *           // 状态
       *           status?: boolean
       *           // 起始时间
       *           startTime?: number
       *           // 结束时间
       *           endTime?: number
       *           // 最近运行时间
       *           lastRunTime?: number
       *           // 下一次运行时间
       *           nextRunTime?: number
       *           // 触发次数
       *           numberOfRuns?: number
       *           // 最大触发次数（0:不限制，n:N次）
       *           maxNumberOfRuns?: number
       *           // 出错次数
       *           numberOfErrors?: number
       *           // 最大出错次数（0:不限制，n:N次）
       *           maxNumberOfErrors?: number
       *           // 重试次数
       *           numRetries?: number
       *           // 重试间隔时间（ms）
       *           retryTimeout?: number
       *           // 是否立即启动
       *           startNow?: boolean
       *           // 是否启动时执行一次
       *           runOnStart?: boolean
       *           // 是否在启动时重置最大触发次数等于一次的作业
       *           resetOnlyOnce?: boolean
       *           // 任务Id
       *           jobId?: number
       *           // 作业触发器状态
       *           state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *           // 系统作业信息表
       *           detail?: JobDetail
       *           // 触发器
       *           records?: Array<{
       *             // 主键
       *             id?: number
       *             // 创建者名称
       *             createBy?: string
       *             // 创建时间
       *             createTime?: number
       *             // 更新者名称
       *             updateBy?: string
       *             // 最后更新时间
       *             updateTime?: number
       *             // 当前运行次数
       *             numberOfRuns?: number
       *             // 最近运行时间
       *             lastRunTime?: number
       *             // 下一次运行时间
       *             nextRunTime?: number
       *             // 作业触发器状态
       *             status?: TriggerStateEnum
       *             // 本次执行结果
       *             result?: string
       *             // 本次执行耗时
       *             elapsedTime?: number
       *             // 触发器Id
       *             triggerId?: number
       *             // 系统作业触发器表
       *             trigger?: JobTrigger
       *           }>
       *         }>
       *       }
       *       // 触发器
       *       records?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 当前运行次数
       *         numberOfRuns?: number
       *         // 最近运行时间
       *         lastRunTime?: number
       *         // 下一次运行时间
       *         nextRunTime?: number
       *         // 作业触发器状态
       *         status?: TriggerStateEnum
       *         // 本次执行结果
       *         result?: string
       *         // 本次执行耗时
       *         elapsedTime?: number
       *         // 触发器Id
       *         triggerId?: number
       *         // 系统作业触发器表
       *         trigger?: JobTrigger
       *       }>
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_jobtrigger_getpage<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobTriggerDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            KeyWord?: string;
            JobId?: number;
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: JobTriggerDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobTrigger.get_api_jobtrigger_getpage',
        Config
      >;
      /**
       * ---
       *
       * [POST] 设置触发器状态
       *
       * **path:** /api/JobTrigger/SetState
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = 1 | 2 | 3 | 4 | 5 | 6
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_jobtrigger_setstate<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
          data: TriggerActionEnum;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobTrigger.post_api_jobtrigger_setstate',
        Config
      >;
      /**
       * ---
       *
       * [POST] 新增
       *
       * **path:** /api/JobTrigger/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 名称
       *   groupName?: string
       *   triggerType?: 1 | 2 | 3 | 4
       *   // 程序集
       *   assemblyName?: string
       *   // 参数
       *   props?: string
       *   // 描述信息
       *   description?: string
       *   // 状态
       *   status?: boolean
       *   // 起始时间
       *   startTime?: number
       *   // 结束时间
       *   endTime?: number
       *   // 最近运行时间
       *   lastRunTime?: number
       *   // 下一次运行时间
       *   nextRunTime?: number
       *   // 触发次数
       *   numberOfRuns?: number
       *   // 最大触发次数（0:不限制，n:N次）
       *   maxNumberOfRuns?: number
       *   // 出错次数
       *   numberOfErrors?: number
       *   // 最大出错次数（0:不限制，n:N次）
       *   maxNumberOfErrors?: number
       *   // 重试次数
       *   numRetries?: number
       *   // 重试间隔时间（ms）
       *   retryTimeout?: number
       *   // 是否立即启动
       *   startNow?: boolean
       *   // 是否启动时执行一次
       *   runOnStart?: boolean
       *   // 是否在启动时重置最大触发次数等于一次的作业
       *   resetOnlyOnce?: boolean
       *   // 任务Id
       *   jobId?: number
       *   // 作业触发器状态
       *   state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *   // 系统作业信息表
       *   detail?: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 组名称
       *     groupName?: string
       *     // 作业类型FullName
       *     jobType?: string
       *     // 程序集Name
       *     assemblyName?: string
       *     // 描述信息
       *     description?: string
       *     // 是否并行执行
       *     concurrent?: boolean
       *     // 是否扫描特性触发器
       *     includeAnnotation?: boolean
       *     // 额外数据
       *     props?: string
       *     // 作业创建类型枚举
       *     type?: JobCreateTypeEnum
       *     // 脚本代码
       *     scriptCode?: string
       *     // 集群Id
       *     clusterId?: number
       *     // 系统作业集群表
       *     cluster?: JobCluster
       *     // 触发器
       *     triggers?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 名称
       *       groupName?: string
       *       triggerType?: 1 | 2 | 3 | 4
       *       // 程序集
       *       assemblyName?: string
       *       // 参数
       *       props?: string
       *       // 描述信息
       *       description?: string
       *       // 状态
       *       status?: boolean
       *       // 起始时间
       *       startTime?: number
       *       // 结束时间
       *       endTime?: number
       *       // 最近运行时间
       *       lastRunTime?: number
       *       // 下一次运行时间
       *       nextRunTime?: number
       *       // 触发次数
       *       numberOfRuns?: number
       *       // 最大触发次数（0:不限制，n:N次）
       *       maxNumberOfRuns?: number
       *       // 出错次数
       *       numberOfErrors?: number
       *       // 最大出错次数（0:不限制，n:N次）
       *       maxNumberOfErrors?: number
       *       // 重试次数
       *       numRetries?: number
       *       // 重试间隔时间（ms）
       *       retryTimeout?: number
       *       // 是否立即启动
       *       startNow?: boolean
       *       // 是否启动时执行一次
       *       runOnStart?: boolean
       *       // 是否在启动时重置最大触发次数等于一次的作业
       *       resetOnlyOnce?: boolean
       *       // 任务Id
       *       jobId?: number
       *       // 作业触发器状态
       *       state?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13
       *       // 系统作业信息表
       *       detail?: JobDetail
       *       // 触发器
       *       records?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 当前运行次数
       *         numberOfRuns?: number
       *         // 最近运行时间
       *         lastRunTime?: number
       *         // 下一次运行时间
       *         nextRunTime?: number
       *         // 作业触发器状态
       *         status?: TriggerStateEnum
       *         // 本次执行结果
       *         result?: string
       *         // 本次执行耗时
       *         elapsedTime?: number
       *         // 触发器Id
       *         triggerId?: number
       *         // 系统作业触发器表
       *         trigger?: JobTrigger
       *       }>
       *     }>
       *   }
       *   // 触发器
       *   records?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 当前运行次数
       *     numberOfRuns?: number
       *     // 最近运行时间
       *     lastRunTime?: number
       *     // 下一次运行时间
       *     nextRunTime?: number
       *     // 作业触发器状态
       *     status?: TriggerStateEnum
       *     // 本次执行结果
       *     result?: string
       *     // 本次执行耗时
       *     elapsedTime?: number
       *     // 触发器Id
       *     triggerId?: number
       *     // 系统作业触发器表
       *     trigger?: JobTrigger
       *   }>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_jobtrigger_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateJobTriggerParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'JobTrigger.post_api_jobtrigger_submit',
        Config
      >;
    };
    Login: {
      /**
       * ---
       *
       * [GET] 获取登录信息
       *
       * **path:** /api/Login/Info
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     // 主键Id!
       *     id?: number
       *     // 名称
       *     name?: string
       *     // 头像
       *     avatar?: string
       *     // 账号
       *     userName?: string
       *     roles?: string[]
       *     buttons?: string[]
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_login_info<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: LoginInfoDTO;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: LoginInfoDTO;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Login.get_api_login_info',
        Config
      >;
      /**
       * ---
       *
       * [POST] 登录
       *
       * **path:** /api/Login/Login
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 账号
       *   userName?: string
       *   // 密码
       *   password?: string
       *   captchaId?: string
       *   captchaCode?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     // 授权token
       *     accessToken?: string
       *     // 过期时间
       *     expires?: number
       *     // 类型
       *     tokenType?: string
       *     // 刷新token
       *     refreshToken?: string
       *     // 允许token时间内
       *     refreshTokenExpires?: number
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_login_login<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: LoginToken;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: LoginParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: LoginToken;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Login.post_api_login_login',
        Config
      >;
      /**
       * ---
       *
       * [POST] 退出登录
       *
       * **path:** /api/Login/LoginOut
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_login_loginout<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Login.post_api_login_loginout',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 修改密码
       *
       * **path:** /api/Login/SetPassword
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // Id
       *   id?: number
       *   // 旧密码
       *   oldPassword?: string
       *   // 新密码
       *   newPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_login_setpassword<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: SetPasswordParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Login.put_api_login_setpassword',
        Config
      >;
    };
    Menu: {
      /**
       * ---
       *
       * [DELETE] 删除
       *
       * **path:** /api/Menu/Delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_menu_delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.delete_api_menu_delete',
        Config
      >;
      /**
       * ---
       *
       * [GET] 通过角色Id获取菜单数组
       *
       * **path:** /api/Menu/GetByRoleId
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   roleId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number[]
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_getbyroleid<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            roleId?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_getbyroleid',
        Config
      >;
      /**
       * ---
       *
       * [GET] 获取常量路由
       *
       * **path:** /api/Menu/GetConstantRoutes
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     id?: number
       *     // 菜单名
       *     name?: string
       *     // 路径
       *     path?: string
       *     // 重定向
       *     redirect?: string
       *     // 组件
       *     component?: string
       *     // 父级
       *     parentId?: number
       *     type?: 1 | 2 | 3 | 4
       *     // 状态
       *     status?: boolean
       *     meta?: {
       *       // 路由标题(可用来作document.title或者菜单的名称)
       *       title?: string
       *       // 多语言
       *       i18nKey?: string
       *       // 权限标识
       *       roles?: string[]
       *       // 缓存页面
       *       keepAlive?: boolean
       *       // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *       constant?: boolean
       *       // 菜单和面包屑对应的图标
       *       icon?: string
       *       // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *       localIcon?: string
       *       // 菜单和面包屑对应的图标的字体大小
       *       iconFontSize?: number
       *       // 路由顺序，可用于菜单的排序
       *       order?: number
       *       // 外链链接
       *       href?: string
       *       // 是否在菜单中隐藏路线
       *       hideInMenu?: boolean
       *       // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *       activeMenu?: string
       *       // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *       multiTab?: boolean
       *       // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *       fixedIndexInTab?: number
       *       // 跳转参数
       *       query?: Array<{
       *         id?: number
       *         // 父级Id
       *         parentId?: number
       *         key?: string
       *         value?: string
       *         // 状态
       *         status?: boolean
       *       }>
       *     }
       *     props?: boolean
       *     // 子节点
       *     children?: Array<RouteDTO>
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_getconstantroutes<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RouteDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RouteDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_getconstantroutes',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/Menu/GetInfo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 菜单 详情
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 菜单名
       *     name?: string
       *     // 路径
       *     path?: string
       *     // 路径
       *     pathParam?: string
       *     layout?: 1 | 2
       *     // 重定向
       *     redirect?: string
       *     // 组件
       *     component?: string
       *     // 父级
       *     parentId?: number
       *     menuType?: 1 | 2 | 3 | 4
       *     iconType?: 1 | 2
       *     // 状态
       *     status?: boolean
       *     // 路由标题(可用来作document.title或者菜单的名称)
       *     title?: string
       *     // 多语言
       *     i18nKey?: string
       *     // 缓存页面
       *     keepAlive?: boolean
       *     // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *     constant?: boolean
       *     // 菜单和面包屑对应的图标
       *     icon?: string
       *     // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *     localIcon?: string
       *     // 菜单和面包屑对应的图标的字体大小
       *     iconFontSize?: number
       *     // 路由顺序，可用于菜单的排序
       *     order?: number
       *     // 外链链接
       *     href?: string
       *     // 是否在菜单中隐藏路线
       *     hideInMenu?: boolean
       *     // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *     activeMenu?: string
       *     // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *     multiTab?: boolean
       *     // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *     fixedIndexInTab?: number
       *     props?: boolean
       *     // 是否已删除
       *     isDeleted?: boolean
       *     roles?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 角色名称
       *       name?: string
       *       type?: 10 | 20 | 30 | 40
       *       // 状态
       *       status?: boolean
       *       // 备注
       *       remark?: string
       *       // 角色代码
       *       code?: string
       *       // 排序
       *       sort?: number
       *       // 公司id
       *       deptId?: number
       *       // 部门
       *       dept?: Dept
       *       menus?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 菜单名
       *         name?: string
       *         // 路径
       *         path?: string
       *         // 路径
       *         pathParam?: string
       *         layout?: 1 | 2
       *         // 重定向
       *         redirect?: string
       *         // 组件
       *         component?: string
       *         // 父级
       *         parentId?: number
       *         menuType?: 1 | 2 | 3 | 4
       *         iconType?: 1 | 2
       *         // 状态
       *         status?: boolean
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         props?: boolean
       *         // 是否已删除
       *         isDeleted?: boolean
       *         roles?: Array<Role>
       *         children?: Array<Menu>
       *       }>
       *       users?: Array<User>
       *     }>
       *     children?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 菜单名
       *       name?: string
       *       // 路径
       *       path?: string
       *       // 路径
       *       pathParam?: string
       *       layout?: 1 | 2
       *       // 重定向
       *       redirect?: string
       *       // 组件
       *       component?: string
       *       // 父级
       *       parentId?: number
       *       menuType?: 1 | 2 | 3 | 4
       *       iconType?: 1 | 2
       *       // 状态
       *       status?: boolean
       *       // 路由标题(可用来作document.title或者菜单的名称)
       *       title?: string
       *       // 多语言
       *       i18nKey?: string
       *       // 缓存页面
       *       keepAlive?: boolean
       *       // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *       constant?: boolean
       *       // 菜单和面包屑对应的图标
       *       icon?: string
       *       // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *       localIcon?: string
       *       // 菜单和面包屑对应的图标的字体大小
       *       iconFontSize?: number
       *       // 路由顺序，可用于菜单的排序
       *       order?: number
       *       // 外链链接
       *       href?: string
       *       // 是否在菜单中隐藏路线
       *       hideInMenu?: boolean
       *       // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *       activeMenu?: string
       *       // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *       multiTab?: boolean
       *       // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *       fixedIndexInTab?: number
       *       props?: boolean
       *       // 是否已删除
       *       isDeleted?: boolean
       *       roles?: Array<Role>
       *       children?: Array<Menu>
       *     }>
       *     buttons?: Array<{
       *       id?: number
       *       // 按钮编码
       *       code?: string
       *       // 描述
       *       desc?: string
       *       // 父级Id
       *       parentId?: number
       *       // 状态
       *       status?: boolean
       *     }>
       *     querys?: Array<{
       *       id?: number
       *       // 父级Id
       *       parentId?: number
       *       key?: string
       *       value?: string
       *       // 状态
       *       status?: boolean
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_getinfo<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 菜单 详情
           * [required]
           */
          data: MenuInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 菜单 详情
           * [required]
           */
          data: MenuInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_getinfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] 获取我的路由
       *
       * **path:** /api/Menu/GetRoutes
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 当前系统我的所有权限
       *   // [required]
       *   data: {
       *     home?: string
       *     routes?: Array<{
       *       id?: number
       *       // 菜单名
       *       name?: string
       *       // 路径
       *       path?: string
       *       // 重定向
       *       redirect?: string
       *       // 组件
       *       component?: string
       *       // 父级
       *       parentId?: number
       *       type?: 1 | 2 | 3 | 4
       *       // 状态
       *       status?: boolean
       *       meta?: {
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 权限标识
       *         roles?: string[]
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         // 跳转参数
       *         query?: Array<{
       *           id?: number
       *           // 父级Id
       *           parentId?: number
       *           key?: string
       *           value?: string
       *           // 状态
       *           status?: boolean
       *         }>
       *       }
       *       props?: boolean
       *       // 子节点
       *       children?: Array<RouteDTO>
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_getroutes<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 当前系统我的所有权限
           * [required]
           */
          data: MyRouteDTO;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 当前系统我的所有权限
           * [required]
           */
          data: MyRouteDTO;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_getroutes',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列表
       *
       * **path:** /api/Menu/GetTree
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     id?: number
       *     // 菜单标题
       *     title?: string
       *     // 路由名称
       *     name?: string
       *     // 父级菜单ID
       *     parentId?: number
       *     // 排序
       *     order?: number
       *     // icon图标
       *     icon?: string
       *     menuType?: 1 | 2 | 3 | 4
       *     // 是否隐藏
       *     hideInMenu?: boolean
       *     // 跳转路由
       *     redirect?: string
       *     // 根目录始终显示
       *     alwaysShow?: boolean
       *     // 状态
       *     status?: boolean
       *     children?: Array<MenuTreeDTO>
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_gettree<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: MenuTreeDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: MenuTreeDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_gettree',
        Config
      >;
      /**
       * ---
       *
       * [GET] 下拉框
       *
       * **path:** /api/Menu/GetTreeSelect
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   parentId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     // 主键Id!
       *     id?: number
       *     // 父级
       *     parentId?: number
       *     // 菜单
       *     title?: string
       *     // 图标
       *     icon?: string
       *     children?: Array<MenuSelectDTO>
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_gettreeselect<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: MenuSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            parentId?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: MenuSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_gettreeselect',
        Config
      >;
      /**
       * ---
       *
       * [GET] 判断路由是否存在
       *
       * **path:** /api/Menu/IsRouteExist
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   name?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: boolean
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_isrouteexist<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: boolean;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            name?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: boolean;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_isrouteexist',
        Config
      >;
      /**
       * ---
       *
       * [GET] 菜单下拉
       *
       * **path:** /api/Menu/Select
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     id?: number
       *     // 父级ID
       *     parentId?: number
       *     // 标题
       *     title?: string
       *     menuType?: 1 | 2 | 3 | 4
       *     children?: Array<RouteSelectDTO>
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_menu_select<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RouteSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RouteSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.get_api_menu_select',
        Config
      >;
      /**
       * ---
       *
       * [POST] 通过角色Id添加菜单数组
       *
       * **path:** /api/Menu/SetByRoleId
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   roleId?: number
       *   menuIds?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_menu_setbyroleid<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: SetByRoleIdDTO;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.post_api_menu_setbyroleid',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置状态
       *
       * **path:** /api/Menu/SetStatus
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       *   status?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_menu_setstatus<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
            status?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.put_api_menu_setstatus',
        Config
      >;
      /**
       * ---
       *
       * [POST] 提交
       *
       * **path:** /api/Menu/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 菜单名
       *   name?: string
       *   // 路径
       *   path?: string
       *   // 路径
       *   pathParam?: string
       *   layout?: 1 | 2
       *   // 重定向
       *   redirect?: string
       *   // 组件
       *   component?: string
       *   // 父级
       *   parentId?: number
       *   menuType?: 1 | 2 | 3 | 4
       *   iconType?: 1 | 2
       *   // 状态
       *   status?: boolean
       *   // 路由标题(可用来作document.title或者菜单的名称)
       *   title?: string
       *   // 多语言
       *   i18nKey?: string
       *   // 缓存页面
       *   keepAlive?: boolean
       *   // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *   constant?: boolean
       *   // 菜单和面包屑对应的图标
       *   icon?: string
       *   // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *   localIcon?: string
       *   // 菜单和面包屑对应的图标的字体大小
       *   iconFontSize?: number
       *   // 路由顺序，可用于菜单的排序
       *   order?: number
       *   // 外链链接
       *   href?: string
       *   // 是否在菜单中隐藏路线
       *   hideInMenu?: boolean
       *   // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *   activeMenu?: string
       *   // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *   multiTab?: boolean
       *   // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *   fixedIndexInTab?: number
       *   props?: boolean
       *   // 是否已删除
       *   isDeleted?: boolean
       *   roles?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 角色名称
       *     name?: string
       *     type?: 10 | 20 | 30 | 40
       *     // 状态
       *     status?: boolean
       *     // 备注
       *     remark?: string
       *     // 角色代码
       *     code?: string
       *     // 排序
       *     sort?: number
       *     // 公司id
       *     deptId?: number
       *     // 部门
       *     dept?: Dept
       *     menus?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 菜单名
       *       name?: string
       *       // 路径
       *       path?: string
       *       // 路径
       *       pathParam?: string
       *       layout?: 1 | 2
       *       // 重定向
       *       redirect?: string
       *       // 组件
       *       component?: string
       *       // 父级
       *       parentId?: number
       *       menuType?: 1 | 2 | 3 | 4
       *       iconType?: 1 | 2
       *       // 状态
       *       status?: boolean
       *       // 路由标题(可用来作document.title或者菜单的名称)
       *       title?: string
       *       // 多语言
       *       i18nKey?: string
       *       // 缓存页面
       *       keepAlive?: boolean
       *       // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *       constant?: boolean
       *       // 菜单和面包屑对应的图标
       *       icon?: string
       *       // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *       localIcon?: string
       *       // 菜单和面包屑对应的图标的字体大小
       *       iconFontSize?: number
       *       // 路由顺序，可用于菜单的排序
       *       order?: number
       *       // 外链链接
       *       href?: string
       *       // 是否在菜单中隐藏路线
       *       hideInMenu?: boolean
       *       // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *       activeMenu?: string
       *       // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *       multiTab?: boolean
       *       // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *       fixedIndexInTab?: number
       *       props?: boolean
       *       // 是否已删除
       *       isDeleted?: boolean
       *       roles?: Array<Role>
       *       children?: Array<Menu>
       *     }>
       *     users?: Array<User>
       *   }>
       *   children?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 菜单名
       *     name?: string
       *     // 路径
       *     path?: string
       *     // 路径
       *     pathParam?: string
       *     layout?: 1 | 2
       *     // 重定向
       *     redirect?: string
       *     // 组件
       *     component?: string
       *     // 父级
       *     parentId?: number
       *     menuType?: 1 | 2 | 3 | 4
       *     iconType?: 1 | 2
       *     // 状态
       *     status?: boolean
       *     // 路由标题(可用来作document.title或者菜单的名称)
       *     title?: string
       *     // 多语言
       *     i18nKey?: string
       *     // 缓存页面
       *     keepAlive?: boolean
       *     // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *     constant?: boolean
       *     // 菜单和面包屑对应的图标
       *     icon?: string
       *     // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *     localIcon?: string
       *     // 菜单和面包屑对应的图标的字体大小
       *     iconFontSize?: number
       *     // 路由顺序，可用于菜单的排序
       *     order?: number
       *     // 外链链接
       *     href?: string
       *     // 是否在菜单中隐藏路线
       *     hideInMenu?: boolean
       *     // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *     activeMenu?: string
       *     // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *     multiTab?: boolean
       *     // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *     fixedIndexInTab?: number
       *     props?: boolean
       *     // 是否已删除
       *     isDeleted?: boolean
       *     roles?: Array<Role>
       *     children?: Array<Menu>
       *   }>
       *   buttons?: Array<{
       *     id?: number
       *     // 按钮编码
       *     code?: string
       *     // 描述
       *     desc?: string
       *     // 父级Id
       *     parentId?: number
       *     // 状态
       *     status?: boolean
       *   }>
       *   querys?: Array<{
       *     id?: number
       *     // 父级Id
       *     parentId?: number
       *     key?: string
       *     value?: string
       *     // 状态
       *     status?: boolean
       *   }>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_menu_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateMenuParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Menu.post_api_menu_submit',
        Config
      >;
    };
    Quartz: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/Quartz/All
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_quartz_all<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Quartz.get_api_quartz_all',
        Config
      >;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/Quartz/DeleteJob
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_quartz_deletejob<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Quartz.delete_api_quartz_deletejob',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/Quartz/ScheduleJob
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_quartz_schedulejob<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Quartz.get_api_quartz_schedulejob',
        Config
      >;
    };
    Rank: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/Rank/Adduser
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_rank_adduser<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Rank.get_api_rank_adduser',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/Rank/AllUserLogin
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_rank_alluserlogin<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Rank.get_api_rank_alluserlogin',
        Config
      >;
      /**
       * ---
       *
       * [GET] 天数排行榜
       *
       * **path:** /api/Rank/Day
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   date?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     // 排名
       *     sort?: number
       *     // 赢
       *     win?: number
       *     // 宝石数
       *     gems?: number
       *     // 用户ID
       *     userId?: number
       *     // 昵称
       *     nickName?: string
       *     // 等级
       *     vip?: string
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_rank_day<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DayRankDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            date?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: DayRankDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Rank.get_api_rank_day',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置连赢
       *
       * **path:** /api/Rank/SetWin
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   type?: number
       *   date?: string
       *   userId?: number
       *   // 赢
       *   newWin?: number
       *   // 宝石数
       *   newGems?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_rank_setwin<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: SetWinParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Rank.put_api_rank_setwin',
        Config
      >;
      /**
       * ---
       *
       * [GET] 周排行榜
       *
       * **path:** /api/Rank/Week
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   date?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     // 排名
       *     sort?: number
       *     // 赢
       *     win?: number
       *     // 宝石数
       *     gems?: number
       *     // 用户ID
       *     userId?: number
       *     // 昵称
       *     nickName?: string
       *     // 等级
       *     vip?: string
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_rank_week<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: WeekRankDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            date?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: WeekRankDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Rank.get_api_rank_week',
        Config
      >;
    };
    Role: {
      /**
       * ---
       *
       * [DELETE] 删除
       *
       * **path:** /api/Role/Delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_role_delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Role.delete_api_role_delete',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/Role/GetInfo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 角色 详情
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 角色名称
       *     name?: string
       *     type?: 10 | 20 | 30 | 40
       *     // 状态
       *     status?: boolean
       *     // 备注
       *     remark?: string
       *     // 角色代码
       *     code?: string
       *     // 排序
       *     sort?: number
       *     // 公司id
       *     deptId?: number
       *     // 部门
       *     dept?: {
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 图标
       *       image?: string
       *       // 单位名称
       *       name?: string
       *       // 简写名称
       *       easyName?: string
       *       // 父级部门ID
       *       parentId?: number
       *       // 地址
       *       address?: string
       *       // 是否删除
       *       isDeleted?: boolean
       *       // 默认联系电话
       *       phone?: string
       *       // 默认联系人
       *       man?: string
       *       // 备注
       *       remark?: string
       *       // 状态
       *       status?: boolean
       *       // 排序
       *       sort?: number
       *       // 首页
       *       home?: string
       *       type?: DeptTypeEnum
       *       users?: Array<User>
       *       roles?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 角色名称
       *         name?: string
       *         type?: 10 | 20 | 30 | 40
       *         // 状态
       *         status?: boolean
       *         // 备注
       *         remark?: string
       *         // 角色代码
       *         code?: string
       *         // 排序
       *         sort?: number
       *         // 公司id
       *         deptId?: number
       *         // 部门
       *         dept?: Dept
       *         menus?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 菜单名
       *           name?: string
       *           // 路径
       *           path?: string
       *           // 路径
       *           pathParam?: string
       *           layout?: 1 | 2
       *           // 重定向
       *           redirect?: string
       *           // 组件
       *           component?: string
       *           // 父级
       *           parentId?: number
       *           menuType?: 1 | 2 | 3 | 4
       *           iconType?: 1 | 2
       *           // 状态
       *           status?: boolean
       *           // 路由标题(可用来作document.title或者菜单的名称)
       *           title?: string
       *           // 多语言
       *           i18nKey?: string
       *           // 缓存页面
       *           keepAlive?: boolean
       *           // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *           constant?: boolean
       *           // 菜单和面包屑对应的图标
       *           icon?: string
       *           // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *           localIcon?: string
       *           // 菜单和面包屑对应的图标的字体大小
       *           iconFontSize?: number
       *           // 路由顺序，可用于菜单的排序
       *           order?: number
       *           // 外链链接
       *           href?: string
       *           // 是否在菜单中隐藏路线
       *           hideInMenu?: boolean
       *           // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *           activeMenu?: string
       *           // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *           multiTab?: boolean
       *           // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *           fixedIndexInTab?: number
       *           props?: boolean
       *           // 是否已删除
       *           isDeleted?: boolean
       *           roles?: Array<Role>
       *           children?: Array<Menu>
       *         }>
       *         users?: Array<User>
       *       }>
       *       children?: Array<Dept>
       *       tenants?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 配置Id
       *         connId?: string
       *         dbType?:
       *           | 0
       *           | 1
       *           | 2
       *           | 3
       *           | 4
       *           | 5
       *           | 6
       *           | 7
       *           | 8
       *           | 9
       *           | 10
       *           | 11
       *           | 12
       *           | 13
       *           | 14
       *           | 15
       *           | 16
       *           | 17
       *           | 18
       *           | 19
       *           | 20
       *           | 21
       *           | 22
       *           | 23
       *           | 24
       *           | 25
       *           | 900
       *         // 状态
       *         enabled?: boolean
       *         // 命中率
       *         hitRate?: number
       *         // 数据库链接
       *         connectionString?: string
       *         // 排序
       *         orderNo?: number
       *         depts?: Array<Dept>
       *       }>
       *     }
       *     menus?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 菜单名
       *       name?: string
       *       // 路径
       *       path?: string
       *       // 路径
       *       pathParam?: string
       *       layout?: 1 | 2
       *       // 重定向
       *       redirect?: string
       *       // 组件
       *       component?: string
       *       // 父级
       *       parentId?: number
       *       menuType?: 1 | 2 | 3 | 4
       *       iconType?: 1 | 2
       *       // 状态
       *       status?: boolean
       *       // 路由标题(可用来作document.title或者菜单的名称)
       *       title?: string
       *       // 多语言
       *       i18nKey?: string
       *       // 缓存页面
       *       keepAlive?: boolean
       *       // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *       constant?: boolean
       *       // 菜单和面包屑对应的图标
       *       icon?: string
       *       // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *       localIcon?: string
       *       // 菜单和面包屑对应的图标的字体大小
       *       iconFontSize?: number
       *       // 路由顺序，可用于菜单的排序
       *       order?: number
       *       // 外链链接
       *       href?: string
       *       // 是否在菜单中隐藏路线
       *       hideInMenu?: boolean
       *       // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *       activeMenu?: string
       *       // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *       multiTab?: boolean
       *       // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *       fixedIndexInTab?: number
       *       props?: boolean
       *       // 是否已删除
       *       isDeleted?: boolean
       *       roles?: Array<Role>
       *       children?: Array<Menu>
       *     }>
       *     users?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 昵称
       *       nickName?: string
       *       // 头像
       *       avatar?: string
       *       // 手机号
       *       phone?: string
       *       // 邮箱
       *       email?: string
       *       // 密码
       *       password?: string
       *       // 状态
       *       status?: boolean
       *       // 账号
       *       userName?: string
       *       // 用户部门关系
       *       depts?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 图标
       *         image?: string
       *         // 单位名称
       *         name?: string
       *         // 简写名称
       *         easyName?: string
       *         // 父级部门ID
       *         parentId?: number
       *         // 地址
       *         address?: string
       *         // 是否删除
       *         isDeleted?: boolean
       *         // 默认联系电话
       *         phone?: string
       *         // 默认联系人
       *         man?: string
       *         // 备注
       *         remark?: string
       *         // 状态
       *         status?: boolean
       *         // 排序
       *         sort?: number
       *         // 首页
       *         home?: string
       *         type?: DeptTypeEnum
       *         users?: Array<User>
       *         roles?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 角色名称
       *           name?: string
       *           type?: 10 | 20 | 30 | 40
       *           // 状态
       *           status?: boolean
       *           // 备注
       *           remark?: string
       *           // 角色代码
       *           code?: string
       *           // 排序
       *           sort?: number
       *           // 公司id
       *           deptId?: number
       *           // 部门
       *           dept?: Dept
       *           menus?: Array<{
       *             // 主键
       *             id?: number
       *             // 创建者名称
       *             createBy?: string
       *             // 创建时间
       *             createTime?: number
       *             // 更新者名称
       *             updateBy?: string
       *             // 最后更新时间
       *             updateTime?: number
       *             // 菜单名
       *             name?: string
       *             // 路径
       *             path?: string
       *             // 路径
       *             pathParam?: string
       *             layout?: 1 | 2
       *             // 重定向
       *             redirect?: string
       *             // 组件
       *             component?: string
       *             // 父级
       *             parentId?: number
       *             menuType?: 1 | 2 | 3 | 4
       *             iconType?: 1 | 2
       *             // 状态
       *             status?: boolean
       *             // 路由标题(可用来作document.title或者菜单的名称)
       *             title?: string
       *             // 多语言
       *             i18nKey?: string
       *             // 缓存页面
       *             keepAlive?: boolean
       *             // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *             constant?: boolean
       *             // 菜单和面包屑对应的图标
       *             icon?: string
       *             // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *             localIcon?: string
       *             // 菜单和面包屑对应的图标的字体大小
       *             iconFontSize?: number
       *             // 路由顺序，可用于菜单的排序
       *             order?: number
       *             // 外链链接
       *             href?: string
       *             // 是否在菜单中隐藏路线
       *             hideInMenu?: boolean
       *             // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *             activeMenu?: string
       *             // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *             multiTab?: boolean
       *             // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *             fixedIndexInTab?: number
       *             props?: boolean
       *             // 是否已删除
       *             isDeleted?: boolean
       *             roles?: Array<Role>
       *             children?: Array<Menu>
       *           }>
       *           users?: Array<User>
       *         }>
       *         children?: Array<Dept>
       *         tenants?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 配置Id
       *           connId?: string
       *           dbType?:
       *             | 0
       *             | 1
       *             | 2
       *             | 3
       *             | 4
       *             | 5
       *             | 6
       *             | 7
       *             | 8
       *             | 9
       *             | 10
       *             | 11
       *             | 12
       *             | 13
       *             | 14
       *             | 15
       *             | 16
       *             | 17
       *             | 18
       *             | 19
       *             | 20
       *             | 21
       *             | 22
       *             | 23
       *             | 24
       *             | 25
       *             | 900
       *           // 状态
       *           enabled?: boolean
       *           // 命中率
       *           hitRate?: number
       *           // 数据库链接
       *           connectionString?: string
       *           // 排序
       *           orderNo?: number
       *           depts?: Array<Dept>
       *         }>
       *       }>
       *       roles?: Array<Role>
       *     }>
       *     menuIds?: number[]
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_role_getinfo<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 角色 详情
           * [required]
           */
          data: RoleInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 角色 详情
           * [required]
           */
          data: RoleInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Role.get_api_role_getinfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] 分页
       *
       * **path:** /api/Role/GetPage
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   KeyWord?: string
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 角色名称
       *       name?: string
       *       type?: 10 | 20 | 30 | 40
       *       // 状态
       *       status?: boolean
       *       // 备注
       *       remark?: string
       *       // 角色代码
       *       code?: string
       *       // 排序
       *       sort?: number
       *       // 公司id
       *       deptId?: number
       *       // 部门
       *       dept?: {
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 图标
       *         image?: string
       *         // 单位名称
       *         name?: string
       *         // 简写名称
       *         easyName?: string
       *         // 父级部门ID
       *         parentId?: number
       *         // 地址
       *         address?: string
       *         // 是否删除
       *         isDeleted?: boolean
       *         // 默认联系电话
       *         phone?: string
       *         // 默认联系人
       *         man?: string
       *         // 备注
       *         remark?: string
       *         // 状态
       *         status?: boolean
       *         // 排序
       *         sort?: number
       *         // 首页
       *         home?: string
       *         type?: DeptTypeEnum
       *         users?: Array<User>
       *         roles?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 角色名称
       *           name?: string
       *           type?: 10 | 20 | 30 | 40
       *           // 状态
       *           status?: boolean
       *           // 备注
       *           remark?: string
       *           // 角色代码
       *           code?: string
       *           // 排序
       *           sort?: number
       *           // 公司id
       *           deptId?: number
       *           // 部门
       *           dept?: Dept
       *           menus?: Array<{
       *             // 主键
       *             id?: number
       *             // 创建者名称
       *             createBy?: string
       *             // 创建时间
       *             createTime?: number
       *             // 更新者名称
       *             updateBy?: string
       *             // 最后更新时间
       *             updateTime?: number
       *             // 菜单名
       *             name?: string
       *             // 路径
       *             path?: string
       *             // 路径
       *             pathParam?: string
       *             layout?: 1 | 2
       *             // 重定向
       *             redirect?: string
       *             // 组件
       *             component?: string
       *             // 父级
       *             parentId?: number
       *             menuType?: 1 | 2 | 3 | 4
       *             iconType?: 1 | 2
       *             // 状态
       *             status?: boolean
       *             // 路由标题(可用来作document.title或者菜单的名称)
       *             title?: string
       *             // 多语言
       *             i18nKey?: string
       *             // 缓存页面
       *             keepAlive?: boolean
       *             // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *             constant?: boolean
       *             // 菜单和面包屑对应的图标
       *             icon?: string
       *             // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *             localIcon?: string
       *             // 菜单和面包屑对应的图标的字体大小
       *             iconFontSize?: number
       *             // 路由顺序，可用于菜单的排序
       *             order?: number
       *             // 外链链接
       *             href?: string
       *             // 是否在菜单中隐藏路线
       *             hideInMenu?: boolean
       *             // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *             activeMenu?: string
       *             // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *             multiTab?: boolean
       *             // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *             fixedIndexInTab?: number
       *             props?: boolean
       *             // 是否已删除
       *             isDeleted?: boolean
       *             roles?: Array<Role>
       *             children?: Array<Menu>
       *           }>
       *           users?: Array<User>
       *         }>
       *         children?: Array<Dept>
       *         tenants?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 配置Id
       *           connId?: string
       *           dbType?:
       *             | 0
       *             | 1
       *             | 2
       *             | 3
       *             | 4
       *             | 5
       *             | 6
       *             | 7
       *             | 8
       *             | 9
       *             | 10
       *             | 11
       *             | 12
       *             | 13
       *             | 14
       *             | 15
       *             | 16
       *             | 17
       *             | 18
       *             | 19
       *             | 20
       *             | 21
       *             | 22
       *             | 23
       *             | 24
       *             | 25
       *             | 900
       *           // 状态
       *           enabled?: boolean
       *           // 命中率
       *           hitRate?: number
       *           // 数据库链接
       *           connectionString?: string
       *           // 排序
       *           orderNo?: number
       *           depts?: Array<Dept>
       *         }>
       *       }
       *       menus?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 菜单名
       *         name?: string
       *         // 路径
       *         path?: string
       *         // 路径
       *         pathParam?: string
       *         layout?: 1 | 2
       *         // 重定向
       *         redirect?: string
       *         // 组件
       *         component?: string
       *         // 父级
       *         parentId?: number
       *         menuType?: 1 | 2 | 3 | 4
       *         iconType?: 1 | 2
       *         // 状态
       *         status?: boolean
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         props?: boolean
       *         // 是否已删除
       *         isDeleted?: boolean
       *         roles?: Array<Role>
       *         children?: Array<Menu>
       *       }>
       *       users?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 昵称
       *         nickName?: string
       *         // 头像
       *         avatar?: string
       *         // 手机号
       *         phone?: string
       *         // 邮箱
       *         email?: string
       *         // 密码
       *         password?: string
       *         // 状态
       *         status?: boolean
       *         // 账号
       *         userName?: string
       *         // 用户部门关系
       *         depts?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 图标
       *           image?: string
       *           // 单位名称
       *           name?: string
       *           // 简写名称
       *           easyName?: string
       *           // 父级部门ID
       *           parentId?: number
       *           // 地址
       *           address?: string
       *           // 是否删除
       *           isDeleted?: boolean
       *           // 默认联系电话
       *           phone?: string
       *           // 默认联系人
       *           man?: string
       *           // 备注
       *           remark?: string
       *           // 状态
       *           status?: boolean
       *           // 排序
       *           sort?: number
       *           // 首页
       *           home?: string
       *           type?: DeptTypeEnum
       *           users?: Array<User>
       *           roles?: Array<{
       *             // 主键
       *             id?: number
       *             // 创建者名称
       *             createBy?: string
       *             // 创建时间
       *             createTime?: number
       *             // 更新者名称
       *             updateBy?: string
       *             // 最后更新时间
       *             updateTime?: number
       *             // 角色名称
       *             name?: string
       *             type?: 10 | 20 | 30 | 40
       *             // 状态
       *             status?: boolean
       *             // 备注
       *             remark?: string
       *             // 角色代码
       *             code?: string
       *             // 排序
       *             sort?: number
       *             // 公司id
       *             deptId?: number
       *             // 部门
       *             dept?: Dept
       *             menus?: Array<{
       *               // 主键
       *               id?: number
       *               // 创建者名称
       *               createBy?: string
       *               // 创建时间
       *               createTime?: number
       *               // 更新者名称
       *               updateBy?: string
       *               // 最后更新时间
       *               updateTime?: number
       *               // 菜单名
       *               name?: string
       *               // 路径
       *               path?: string
       *               // 路径
       *               pathParam?: string
       *               layout?: 1 | 2
       *               // 重定向
       *               redirect?: string
       *               // 组件
       *               component?: string
       *               // 父级
       *               parentId?: number
       *               menuType?: 1 | 2 | 3 | 4
       *               iconType?: 1 | 2
       *               // 状态
       *               status?: boolean
       *               // 路由标题(可用来作document.title或者菜单的名称)
       *               title?: string
       *               // 多语言
       *               i18nKey?: string
       *               // 缓存页面
       *               keepAlive?: boolean
       *               // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *               constant?: boolean
       *               // 菜单和面包屑对应的图标
       *               icon?: string
       *               // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *               localIcon?: string
       *               // 菜单和面包屑对应的图标的字体大小
       *               iconFontSize?: number
       *               // 路由顺序，可用于菜单的排序
       *               order?: number
       *               // 外链链接
       *               href?: string
       *               // 是否在菜单中隐藏路线
       *               hideInMenu?: boolean
       *               // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *               activeMenu?: string
       *               // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *               multiTab?: boolean
       *               // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *               fixedIndexInTab?: number
       *               props?: boolean
       *               // 是否已删除
       *               isDeleted?: boolean
       *               roles?: Array<Role>
       *               children?: Array<Menu>
       *             }>
       *             users?: Array<User>
       *           }>
       *           children?: Array<Dept>
       *           tenants?: Array<{
       *             // 主键
       *             id?: number
       *             // 创建者名称
       *             createBy?: string
       *             // 创建时间
       *             createTime?: number
       *             // 更新者名称
       *             updateBy?: string
       *             // 最后更新时间
       *             updateTime?: number
       *             // 配置Id
       *             connId?: string
       *             dbType?:
       *               | 0
       *               | 1
       *               | 2
       *               | 3
       *               | 4
       *               | 5
       *               | 6
       *               | 7
       *               | 8
       *               | 9
       *               | 10
       *               | 11
       *               | 12
       *               | 13
       *               | 14
       *               | 15
       *               | 16
       *               | 17
       *               | 18
       *               | 19
       *               | 20
       *               | 21
       *               | 22
       *               | 23
       *               | 24
       *               | 25
       *               | 900
       *             // 状态
       *             enabled?: boolean
       *             // 命中率
       *             hitRate?: number
       *             // 数据库链接
       *             connectionString?: string
       *             // 排序
       *             orderNo?: number
       *             depts?: Array<Dept>
       *           }>
       *         }>
       *         roles?: Array<Role>
       *       }>
       *       // 组织名称
       *       deptName?: string
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_role_getpage<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RoleDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            KeyWord?: string;
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RoleDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Role.get_api_role_getpage',
        Config
      >;
      /**
       * ---
       *
       * [GET] 下拉框
       *
       * **path:** /api/Role/GetSelect
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: Array<{
       *     // 主键Id!
       *     id?: number
       *     // 账号
       *     name?: string
       *   }>
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_role_getselect<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RoleSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: RoleSelectDTO[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Role.get_api_role_getselect',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置状态
       *
       * **path:** /api/Role/SetStatus
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       *   status?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_role_setstatus<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
            status?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Role.put_api_role_setstatus',
        Config
      >;
      /**
       * ---
       *
       * [POST] 新增
       *
       * **path:** /api/Role/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 角色名称
       *   name?: string
       *   type?: 10 | 20 | 30 | 40
       *   // 状态
       *   status?: boolean
       *   // 备注
       *   remark?: string
       *   // 角色代码
       *   code?: string
       *   // 排序
       *   sort?: number
       *   // 公司id
       *   deptId?: number
       *   // 部门
       *   dept?: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 图标
       *     image?: string
       *     // 单位名称
       *     name?: string
       *     // 简写名称
       *     easyName?: string
       *     // 父级部门ID
       *     parentId?: number
       *     // 地址
       *     address?: string
       *     // 是否删除
       *     isDeleted?: boolean
       *     // 默认联系电话
       *     phone?: string
       *     // 默认联系人
       *     man?: string
       *     // 备注
       *     remark?: string
       *     // 状态
       *     status?: boolean
       *     // 排序
       *     sort?: number
       *     // 首页
       *     home?: string
       *     type?: DeptTypeEnum
       *     users?: Array<User>
       *     roles?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 角色名称
       *       name?: string
       *       type?: 10 | 20 | 30 | 40
       *       // 状态
       *       status?: boolean
       *       // 备注
       *       remark?: string
       *       // 角色代码
       *       code?: string
       *       // 排序
       *       sort?: number
       *       // 公司id
       *       deptId?: number
       *       // 部门
       *       dept?: Dept
       *       menus?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 菜单名
       *         name?: string
       *         // 路径
       *         path?: string
       *         // 路径
       *         pathParam?: string
       *         layout?: 1 | 2
       *         // 重定向
       *         redirect?: string
       *         // 组件
       *         component?: string
       *         // 父级
       *         parentId?: number
       *         menuType?: 1 | 2 | 3 | 4
       *         iconType?: 1 | 2
       *         // 状态
       *         status?: boolean
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         props?: boolean
       *         // 是否已删除
       *         isDeleted?: boolean
       *         roles?: Array<Role>
       *         children?: Array<Menu>
       *       }>
       *       users?: Array<User>
       *     }>
       *     children?: Array<Dept>
       *     tenants?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 配置Id
       *       connId?: string
       *       dbType?:
       *         | 0
       *         | 1
       *         | 2
       *         | 3
       *         | 4
       *         | 5
       *         | 6
       *         | 7
       *         | 8
       *         | 9
       *         | 10
       *         | 11
       *         | 12
       *         | 13
       *         | 14
       *         | 15
       *         | 16
       *         | 17
       *         | 18
       *         | 19
       *         | 20
       *         | 21
       *         | 22
       *         | 23
       *         | 24
       *         | 25
       *         | 900
       *       // 状态
       *       enabled?: boolean
       *       // 命中率
       *       hitRate?: number
       *       // 数据库链接
       *       connectionString?: string
       *       // 排序
       *       orderNo?: number
       *       depts?: Array<Dept>
       *     }>
       *   }
       *   menus?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 菜单名
       *     name?: string
       *     // 路径
       *     path?: string
       *     // 路径
       *     pathParam?: string
       *     layout?: 1 | 2
       *     // 重定向
       *     redirect?: string
       *     // 组件
       *     component?: string
       *     // 父级
       *     parentId?: number
       *     menuType?: 1 | 2 | 3 | 4
       *     iconType?: 1 | 2
       *     // 状态
       *     status?: boolean
       *     // 路由标题(可用来作document.title或者菜单的名称)
       *     title?: string
       *     // 多语言
       *     i18nKey?: string
       *     // 缓存页面
       *     keepAlive?: boolean
       *     // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *     constant?: boolean
       *     // 菜单和面包屑对应的图标
       *     icon?: string
       *     // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *     localIcon?: string
       *     // 菜单和面包屑对应的图标的字体大小
       *     iconFontSize?: number
       *     // 路由顺序，可用于菜单的排序
       *     order?: number
       *     // 外链链接
       *     href?: string
       *     // 是否在菜单中隐藏路线
       *     hideInMenu?: boolean
       *     // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *     activeMenu?: string
       *     // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *     multiTab?: boolean
       *     // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *     fixedIndexInTab?: number
       *     props?: boolean
       *     // 是否已删除
       *     isDeleted?: boolean
       *     roles?: Array<Role>
       *     children?: Array<Menu>
       *   }>
       *   users?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 昵称
       *     nickName?: string
       *     // 头像
       *     avatar?: string
       *     // 手机号
       *     phone?: string
       *     // 邮箱
       *     email?: string
       *     // 密码
       *     password?: string
       *     // 状态
       *     status?: boolean
       *     // 账号
       *     userName?: string
       *     // 用户部门关系
       *     depts?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 图标
       *       image?: string
       *       // 单位名称
       *       name?: string
       *       // 简写名称
       *       easyName?: string
       *       // 父级部门ID
       *       parentId?: number
       *       // 地址
       *       address?: string
       *       // 是否删除
       *       isDeleted?: boolean
       *       // 默认联系电话
       *       phone?: string
       *       // 默认联系人
       *       man?: string
       *       // 备注
       *       remark?: string
       *       // 状态
       *       status?: boolean
       *       // 排序
       *       sort?: number
       *       // 首页
       *       home?: string
       *       type?: DeptTypeEnum
       *       users?: Array<User>
       *       roles?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 角色名称
       *         name?: string
       *         type?: 10 | 20 | 30 | 40
       *         // 状态
       *         status?: boolean
       *         // 备注
       *         remark?: string
       *         // 角色代码
       *         code?: string
       *         // 排序
       *         sort?: number
       *         // 公司id
       *         deptId?: number
       *         // 部门
       *         dept?: Dept
       *         menus?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 菜单名
       *           name?: string
       *           // 路径
       *           path?: string
       *           // 路径
       *           pathParam?: string
       *           layout?: 1 | 2
       *           // 重定向
       *           redirect?: string
       *           // 组件
       *           component?: string
       *           // 父级
       *           parentId?: number
       *           menuType?: 1 | 2 | 3 | 4
       *           iconType?: 1 | 2
       *           // 状态
       *           status?: boolean
       *           // 路由标题(可用来作document.title或者菜单的名称)
       *           title?: string
       *           // 多语言
       *           i18nKey?: string
       *           // 缓存页面
       *           keepAlive?: boolean
       *           // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *           constant?: boolean
       *           // 菜单和面包屑对应的图标
       *           icon?: string
       *           // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *           localIcon?: string
       *           // 菜单和面包屑对应的图标的字体大小
       *           iconFontSize?: number
       *           // 路由顺序，可用于菜单的排序
       *           order?: number
       *           // 外链链接
       *           href?: string
       *           // 是否在菜单中隐藏路线
       *           hideInMenu?: boolean
       *           // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *           activeMenu?: string
       *           // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *           multiTab?: boolean
       *           // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *           fixedIndexInTab?: number
       *           props?: boolean
       *           // 是否已删除
       *           isDeleted?: boolean
       *           roles?: Array<Role>
       *           children?: Array<Menu>
       *         }>
       *         users?: Array<User>
       *       }>
       *       children?: Array<Dept>
       *       tenants?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 配置Id
       *         connId?: string
       *         dbType?:
       *           | 0
       *           | 1
       *           | 2
       *           | 3
       *           | 4
       *           | 5
       *           | 6
       *           | 7
       *           | 8
       *           | 9
       *           | 10
       *           | 11
       *           | 12
       *           | 13
       *           | 14
       *           | 15
       *           | 16
       *           | 17
       *           | 18
       *           | 19
       *           | 20
       *           | 21
       *           | 22
       *           | 23
       *           | 24
       *           | 25
       *           | 900
       *         // 状态
       *         enabled?: boolean
       *         // 命中率
       *         hitRate?: number
       *         // 数据库链接
       *         connectionString?: string
       *         // 排序
       *         orderNo?: number
       *         depts?: Array<Dept>
       *       }>
       *     }>
       *     roles?: Array<Role>
       *   }>
       *   // 菜单
       *   menuIds?: number[]
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_role_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateRoleParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Role.post_api_role_submit',
        Config
      >;
    };
    Sha: {
      /**
       * ---
       *
       * [GET] 杀局每日统计
       *
       * **path:** /api/Sha/TotalPage
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   StartDate?: string
       *   EndDate?: string
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: Array<{
       *       // 日期
       *       date?: string
       *       // 场次
       *       count?: number
       *       // 总投入
       *       betting_Coin_Total?: number
       *       // 总获得
       *       win_Total?: number
       *       // 玩家获得
       *       user_Win_Total?: number
       *       // 机器人获取
       *       robot_Mian_Total?: number
       *       // 总损失
       *       lose_Total?: number
       *       // 玩家损失
       *       user_Lose_Total?: number
       *       // 机器人损失
       *       robot_Lose_Total?: number
       *       // 平台抽成
       *       fee_Total?: number
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_sha_totalpage<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: ShaTotalDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            StartDate?: string;
            EndDate?: string;
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: ShaTotalDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Sha.get_api_sha_totalpage',
        Config
      >;
      /**
       * ---
       *
       * [GET] 玩家统计
       *
       * **path:** /api/Sha/UserTotal
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   KeyWord?: string
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: Array<{
       *       id?: number
       *       // 昵称
       *       nickname?: string
       *       // 手机号
       *       tel_Num?: string
       *       // 区号
       *       tel_Area_Code?: string
       *       // 投注次数
       *       total_Betting_Coin?: number
       *       // 投注金额
       *       total_Betting?: number
       *       // 赢
       *       total_Win?: number
       *       // 输
       *       total_Lose?: number
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_sha_usertotal<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: ShaUserTotalDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            KeyWord?: string;
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: ShaUserTotalDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Sha.get_api_sha_usertotal',
        Config
      >;
    };
    TableColumn: {
      /**
       * ---
       *
       * [DELETE] 删除表头
       *
       * **path:** /api/TableColumn/Delete/{configId}/{tableof}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   configId: string
       *   // [required]
       *   tableof: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_tablecolumn_delete_configid_tableof<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            configId: string;
            /**
             * [required]
             */
            tableof: string;
          };
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableColumn.delete_api_tablecolumn_delete_configid_tableof',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/TableColumn/GetInfo/{configId}/{tableof}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   configId: string
       *   // [required]
       *   tableof: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_tablecolumn_getinfo_configid_tableof<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            configId: string;
            /**
             * [required]
             */
            tableof: string;
          };
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableColumn.get_api_tablecolumn_getinfo_configid_tableof',
        Config
      >;
      /**
       * ---
       *
       * [GET] 分页
       *
       * **path:** /api/TableColumn/GetPage/{configId}/{tableof}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   configId: string
       *   // [required]
       *   tableof: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: unknown[]
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_tablecolumn_getpage_configid_tableof<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: ObjectPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            configId: string;
            /**
             * [required]
             */
            tableof: string;
          };
          params: {
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: ObjectPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableColumn.get_api_tablecolumn_getpage_configid_tableof',
        Config
      >;
      /**
       * ---
       *
       * [POST] 新增
       *
       * **path:** /api/TableColumn/Submit/{configId}/{tableof}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   configId: string
       *   // [required]
       *   tableof: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = Record<string, unknown>
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_tablecolumn_submit_configid_tableof<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            configId: string;
            /**
             * [required]
             */
            tableof: string;
          };
          data: Record<string, unknown>;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableColumn.post_api_tablecolumn_submit_configid_tableof',
        Config
      >;
    };
    TableView: {
      /**
       * ---
       *
       * [DELETE] 删除表头
       *
       * **path:** /api/TableView/DeleteTableHeader
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_tableview_deletetableheader<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.delete_api_tableview_deletetableheader',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/TableView/GetTableHeader
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   Tableof?: string
       *   Router?: string
       *   Type?: 1 | 2 | 3
       *   ConfigId?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 表格重写
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 表名
       *     tableof?: string
       *     // 路由
       *     router?: string
       *     type?: 1 | 2 | 3
       *     // 默认排序字段
       *     sortKey?: string
       *     // 排序排序方式
       *     sortOrder?: string
       *     // 多余参数
       *     props?: string
       *     // 多余参数
       *     configId?: string
       *     // 字段
       *     tableColumns?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 视图Id
       *       viewId?: number
       *       // 字段名称
       *       title?: string
       *       // 字段
       *       key?: string
       *       searchType?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
       *       columnType?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 50 | 99
       *       // 字段描述
       *       columnTypeDetail?: string
       *       // 字段验证
       *       columnTypeRules?: string
       *       // 是否自定义
       *       isCustom?: boolean
       *       // 排序
       *       sort?: number
       *       // 是否隐藏
       *       isShow?: boolean
       *       // 多余参数
       *       props?: string
       *       // 表格重写
       *       tableView?: TableView
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_tableview_gettableheader<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 表格重写
           * [required]
           */
          data: TableView;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            Tableof?: string;
            Router?: string;
            Type?: ViewTypeEnum;
            ConfigId?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 表格重写
           * [required]
           */
          data: TableView;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.get_api_tableview_gettableheader',
        Config
      >;
      /**
       * ---
       *
       * [GET] 表头信息获取
       *
       * **path:** /api/TableView/GetView
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   Tableof?: string
       *   Router?: string
       *   Type?: 1 | 2 | 3
       *   ConfigId?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 表格重写
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 表名
       *     tableof?: string
       *     // 路由
       *     router?: string
       *     type?: 1 | 2 | 3
       *     // 默认排序字段
       *     sortKey?: string
       *     // 排序排序方式
       *     sortOrder?: string
       *     // 多余参数
       *     props?: string
       *     // 多余参数
       *     configId?: string
       *     // 字段
       *     tableColumns?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 视图Id
       *       viewId?: number
       *       // 字段名称
       *       title?: string
       *       // 字段
       *       key?: string
       *       searchType?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
       *       columnType?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 50 | 99
       *       // 字段描述
       *       columnTypeDetail?: string
       *       // 字段验证
       *       columnTypeRules?: string
       *       // 是否自定义
       *       isCustom?: boolean
       *       // 排序
       *       sort?: number
       *       // 是否隐藏
       *       isShow?: boolean
       *       // 多余参数
       *       props?: string
       *       // 表格重写
       *       tableView?: TableView
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_tableview_getview<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 表格重写
           * [required]
           */
          data: TableView;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            Tableof?: string;
            Router?: string;
            Type?: ViewTypeEnum;
            ConfigId?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 表格重写
           * [required]
           */
          data: TableView;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.get_api_tableview_getview',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置高阶字段
       *
       * **path:** /api/TableView/SetProps
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 字段Id
       *   columnId?: number
       *   // 字段
       *   props?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_tableview_setprops<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: SetPropsParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.put_api_tableview_setprops',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置表头
       *
       * **path:** /api/TableView/SetTableHeader
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 视图Id
       *   viewId?: number
       *   // 字段名称
       *   title?: string
       *   // 字段
       *   key?: string
       *   searchType?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
       *   columnType?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 50 | 99
       *   // 字段描述
       *   columnTypeDetail?: string
       *   // 字段验证
       *   columnTypeRules?: string
       *   // 是否自定义
       *   isCustom?: boolean
       *   // 排序
       *   sort?: number
       *   // 是否隐藏
       *   isShow?: boolean
       *   // 多余参数
       *   props?: string
       *   // 表格重写
       *   tableView?: TableView
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 表格重写
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 视图Id
       *     viewId?: number
       *     // 字段名称
       *     title?: string
       *     // 字段
       *     key?: string
       *     searchType?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
       *     columnType?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 50 | 99
       *     // 字段描述
       *     columnTypeDetail?: string
       *     // 字段验证
       *     columnTypeRules?: string
       *     // 是否自定义
       *     isCustom?: boolean
       *     // 排序
       *     sort?: number
       *     // 是否隐藏
       *     isShow?: boolean
       *     // 多余参数
       *     props?: string
       *     // 表格重写
       *     tableView?: TableView
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_tableview_settableheader<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 表格重写
           * [required]
           */
          data: TableColumn;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: TableColumn;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 表格重写
           * [required]
           */
          data: TableColumn;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.put_api_tableview_settableheader',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 排序
       *
       * **path:** /api/TableView/SetTableSort
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = Array<{
       *   id?: number
       *   sort?: number
       * }>
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_tableview_settablesort<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: TableSortParam[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.put_api_tableview_settablesort',
        Config
      >;
      /**
       * ---
       *
       * [POST] 新增
       *
       * **path:** /api/TableView/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 表名
       *   tableof?: string
       *   // 路由
       *   router?: string
       *   type?: 1 | 2 | 3
       *   // 默认排序字段
       *   sortKey?: string
       *   // 排序排序方式
       *   sortOrder?: string
       *   // 多余参数
       *   props?: string
       *   // 多余参数
       *   configId?: string
       *   // 字段
       *   tableColumns?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 视图Id
       *     viewId?: number
       *     // 字段名称
       *     title?: string
       *     // 字段
       *     key?: string
       *     searchType?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
       *     columnType?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 50 | 99
       *     // 字段描述
       *     columnTypeDetail?: string
       *     // 字段验证
       *     columnTypeRules?: string
       *     // 是否自定义
       *     isCustom?: boolean
       *     // 排序
       *     sort?: number
       *     // 是否隐藏
       *     isShow?: boolean
       *     // 多余参数
       *     props?: string
       *     // 表格重写
       *     tableView?: TableView
       *   }>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_tableview_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateTableViewParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'TableView.post_api_tableview_submit',
        Config
      >;
    };
    Upload: {
      /**
       * ---
       *
       * [POST] 上传图片
       *
       * **path:** /api/Upload/Images
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: string[]
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_upload_images<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: string[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: string[];
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'Upload.post_api_upload_images',
        Config
      >;
    };
    User: {
      /**
       * ---
       *
       * [DELETE] 删除
       *
       * **path:** /api/User/Delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = number[]
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      delete_api_user_delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: number[];
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'User.delete_api_user_delete',
        Config
      >;
      /**
       * ---
       *
       * [GET] 查询详情
       *
       * **path:** /api/User/GetInfo
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // 用户 详情
       *   // [required]
       *   data: {
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 昵称
       *     nickName?: string
       *     // 头像
       *     avatar?: string
       *     // 手机号
       *     phone?: string
       *     // 邮箱
       *     email?: string
       *     // 密码
       *     password?: string
       *     // 状态
       *     status?: boolean
       *     // 账号
       *     userName?: string
       *     // 用户部门关系
       *     depts?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 图标
       *       image?: string
       *       // 单位名称
       *       name?: string
       *       // 简写名称
       *       easyName?: string
       *       // 父级部门ID
       *       parentId?: number
       *       // 地址
       *       address?: string
       *       // 是否删除
       *       isDeleted?: boolean
       *       // 默认联系电话
       *       phone?: string
       *       // 默认联系人
       *       man?: string
       *       // 备注
       *       remark?: string
       *       // 状态
       *       status?: boolean
       *       // 排序
       *       sort?: number
       *       // 首页
       *       home?: string
       *       type?: DeptTypeEnum
       *       users?: Array<User>
       *       roles?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 角色名称
       *         name?: string
       *         type?: 10 | 20 | 30 | 40
       *         // 状态
       *         status?: boolean
       *         // 备注
       *         remark?: string
       *         // 角色代码
       *         code?: string
       *         // 排序
       *         sort?: number
       *         // 公司id
       *         deptId?: number
       *         // 部门
       *         dept?: Dept
       *         menus?: Array<{
       *           // 主键
       *           id?: number
       *           // 创建者名称
       *           createBy?: string
       *           // 创建时间
       *           createTime?: number
       *           // 更新者名称
       *           updateBy?: string
       *           // 最后更新时间
       *           updateTime?: number
       *           // 菜单名
       *           name?: string
       *           // 路径
       *           path?: string
       *           // 路径
       *           pathParam?: string
       *           layout?: 1 | 2
       *           // 重定向
       *           redirect?: string
       *           // 组件
       *           component?: string
       *           // 父级
       *           parentId?: number
       *           menuType?: 1 | 2 | 3 | 4
       *           iconType?: 1 | 2
       *           // 状态
       *           status?: boolean
       *           // 路由标题(可用来作document.title或者菜单的名称)
       *           title?: string
       *           // 多语言
       *           i18nKey?: string
       *           // 缓存页面
       *           keepAlive?: boolean
       *           // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *           constant?: boolean
       *           // 菜单和面包屑对应的图标
       *           icon?: string
       *           // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *           localIcon?: string
       *           // 菜单和面包屑对应的图标的字体大小
       *           iconFontSize?: number
       *           // 路由顺序，可用于菜单的排序
       *           order?: number
       *           // 外链链接
       *           href?: string
       *           // 是否在菜单中隐藏路线
       *           hideInMenu?: boolean
       *           // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *           activeMenu?: string
       *           // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *           multiTab?: boolean
       *           // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *           fixedIndexInTab?: number
       *           props?: boolean
       *           // 是否已删除
       *           isDeleted?: boolean
       *           roles?: Array<Role>
       *           children?: Array<Menu>
       *         }>
       *         users?: Array<User>
       *       }>
       *       children?: Array<Dept>
       *       tenants?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 配置Id
       *         connId?: string
       *         dbType?:
       *           | 0
       *           | 1
       *           | 2
       *           | 3
       *           | 4
       *           | 5
       *           | 6
       *           | 7
       *           | 8
       *           | 9
       *           | 10
       *           | 11
       *           | 12
       *           | 13
       *           | 14
       *           | 15
       *           | 16
       *           | 17
       *           | 18
       *           | 19
       *           | 20
       *           | 21
       *           | 22
       *           | 23
       *           | 24
       *           | 25
       *           | 900
       *         // 状态
       *         enabled?: boolean
       *         // 命中率
       *         hitRate?: number
       *         // 数据库链接
       *         connectionString?: string
       *         // 排序
       *         orderNo?: number
       *         depts?: Array<Dept>
       *       }>
       *     }>
       *     roles?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 角色名称
       *       name?: string
       *       type?: 10 | 20 | 30 | 40
       *       // 状态
       *       status?: boolean
       *       // 备注
       *       remark?: string
       *       // 角色代码
       *       code?: string
       *       // 排序
       *       sort?: number
       *       // 公司id
       *       deptId?: number
       *       // 部门
       *       dept?: Dept
       *       menus?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 菜单名
       *         name?: string
       *         // 路径
       *         path?: string
       *         // 路径
       *         pathParam?: string
       *         layout?: 1 | 2
       *         // 重定向
       *         redirect?: string
       *         // 组件
       *         component?: string
       *         // 父级
       *         parentId?: number
       *         menuType?: 1 | 2 | 3 | 4
       *         iconType?: 1 | 2
       *         // 状态
       *         status?: boolean
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         props?: boolean
       *         // 是否已删除
       *         isDeleted?: boolean
       *         roles?: Array<Role>
       *         children?: Array<Menu>
       *       }>
       *       users?: Array<User>
       *     }>
       *     roleIds?: number[]
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_user_getinfo<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * 用户 详情
           * [required]
           */
          data: UserInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * 用户 详情
           * [required]
           */
          data: UserInfo;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'User.get_api_user_getinfo',
        Config
      >;
      /**
       * ---
       *
       * [GET] 分页
       *
       * **path:** /api/User/GetPage
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   KeyWord?: string
       *   // 公司
       *   DeptId?: number
       *   StartIndex?: number
       *   Search?: Record<string, Record<string, string>>
       *   PageIndex?: number
       *   PageSize?: number
       *   SortList?: Record<string, string>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: {
       *     pagerInfo?: {
       *       totalRowCount?: number
       *       pageSize?: number
       *       startIndex?: number
       *       pageIndex?: number
       *       hasPrev?: boolean
       *       hasNext?: boolean
       *       isFirst?: boolean
       *       isLast?: boolean
       *       totalPageCount?: number
       *     }
       *     data?: Array<{
       *       id?: number
       *       // 昵称
       *       nickName?: string
       *       // 头像
       *       avatar?: string
       *       // 手机号
       *       phone?: string
       *       // 电子邮箱
       *       email?: string
       *       // 状态
       *       status?: boolean
       *       // 账号
       *       userName?: string
       *     }>
       *   }
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      get_api_user_getpage<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: UserDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            KeyWord?: string;
            /**
             * 公司
             */
            DeptId?: number;
            StartIndex?: number;
            Search?: Record<string, Record<string, string>>;
            PageIndex?: number;
            PageSize?: number;
            SortList?: Record<string, string>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: UserDTOPagedResults;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'User.get_api_user_getpage',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 修改密码
       *
       * **path:** /api/User/SetPassword
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // Id
       *   id?: number
       *   // 旧密码
       *   oldPassword?: string
       *   // 新密码
       *   newPassword?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: unknown
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_user_setpassword<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: SetPasswordParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: unknown;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'User.put_api_user_setpassword',
        Config
      >;
      /**
       * ---
       *
       * [PUT] 设置状态
       *
       * **path:** /api/User/SetStatus
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   id?: number
       *   status?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      put_api_user_setstatus<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          params: {
            id?: number;
            status?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'User.put_api_user_setstatus',
        Config
      >;
      /**
       * ---
       *
       * [POST] 提交
       *
       * **path:** /api/User/Submit
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 主键
       *   id?: number
       *   // 创建者名称
       *   createBy?: string
       *   // 创建时间
       *   createTime?: number
       *   // 更新者名称
       *   updateBy?: string
       *   // 最后更新时间
       *   updateTime?: number
       *   // 昵称
       *   nickName?: string
       *   // 头像
       *   avatar?: string
       *   // 手机号
       *   phone?: string
       *   // 邮箱
       *   email?: string
       *   // 状态
       *   status?: boolean
       *   // 账号
       *   userName?: string
       *   // 用户部门关系
       *   depts?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 图标
       *     image?: string
       *     // 单位名称
       *     name?: string
       *     // 简写名称
       *     easyName?: string
       *     // 父级部门ID
       *     parentId?: number
       *     // 地址
       *     address?: string
       *     // 是否删除
       *     isDeleted?: boolean
       *     // 默认联系电话
       *     phone?: string
       *     // 默认联系人
       *     man?: string
       *     // 备注
       *     remark?: string
       *     // 状态
       *     status?: boolean
       *     // 排序
       *     sort?: number
       *     // 首页
       *     home?: string
       *     type?: DeptTypeEnum
       *     users?: Array<User>
       *     roles?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 角色名称
       *       name?: string
       *       type?: 10 | 20 | 30 | 40
       *       // 状态
       *       status?: boolean
       *       // 备注
       *       remark?: string
       *       // 角色代码
       *       code?: string
       *       // 排序
       *       sort?: number
       *       // 公司id
       *       deptId?: number
       *       // 部门
       *       dept?: Dept
       *       menus?: Array<{
       *         // 主键
       *         id?: number
       *         // 创建者名称
       *         createBy?: string
       *         // 创建时间
       *         createTime?: number
       *         // 更新者名称
       *         updateBy?: string
       *         // 最后更新时间
       *         updateTime?: number
       *         // 菜单名
       *         name?: string
       *         // 路径
       *         path?: string
       *         // 路径
       *         pathParam?: string
       *         layout?: 1 | 2
       *         // 重定向
       *         redirect?: string
       *         // 组件
       *         component?: string
       *         // 父级
       *         parentId?: number
       *         menuType?: 1 | 2 | 3 | 4
       *         iconType?: 1 | 2
       *         // 状态
       *         status?: boolean
       *         // 路由标题(可用来作document.title或者菜单的名称)
       *         title?: string
       *         // 多语言
       *         i18nKey?: string
       *         // 缓存页面
       *         keepAlive?: boolean
       *         // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *         constant?: boolean
       *         // 菜单和面包屑对应的图标
       *         icon?: string
       *         // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *         localIcon?: string
       *         // 菜单和面包屑对应的图标的字体大小
       *         iconFontSize?: number
       *         // 路由顺序，可用于菜单的排序
       *         order?: number
       *         // 外链链接
       *         href?: string
       *         // 是否在菜单中隐藏路线
       *         hideInMenu?: boolean
       *         // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *         activeMenu?: string
       *         // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *         multiTab?: boolean
       *         // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *         fixedIndexInTab?: number
       *         props?: boolean
       *         // 是否已删除
       *         isDeleted?: boolean
       *         roles?: Array<Role>
       *         children?: Array<Menu>
       *       }>
       *       users?: Array<User>
       *     }>
       *     children?: Array<Dept>
       *     tenants?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 配置Id
       *       connId?: string
       *       dbType?:
       *         | 0
       *         | 1
       *         | 2
       *         | 3
       *         | 4
       *         | 5
       *         | 6
       *         | 7
       *         | 8
       *         | 9
       *         | 10
       *         | 11
       *         | 12
       *         | 13
       *         | 14
       *         | 15
       *         | 16
       *         | 17
       *         | 18
       *         | 19
       *         | 20
       *         | 21
       *         | 22
       *         | 23
       *         | 24
       *         | 25
       *         | 900
       *       // 状态
       *       enabled?: boolean
       *       // 命中率
       *       hitRate?: number
       *       // 数据库链接
       *       connectionString?: string
       *       // 排序
       *       orderNo?: number
       *       depts?: Array<Dept>
       *     }>
       *   }>
       *   roles?: Array<{
       *     // 主键
       *     id?: number
       *     // 创建者名称
       *     createBy?: string
       *     // 创建时间
       *     createTime?: number
       *     // 更新者名称
       *     updateBy?: string
       *     // 最后更新时间
       *     updateTime?: number
       *     // 角色名称
       *     name?: string
       *     type?: 10 | 20 | 30 | 40
       *     // 状态
       *     status?: boolean
       *     // 备注
       *     remark?: string
       *     // 角色代码
       *     code?: string
       *     // 排序
       *     sort?: number
       *     // 公司id
       *     deptId?: number
       *     // 部门
       *     dept?: Dept
       *     menus?: Array<{
       *       // 主键
       *       id?: number
       *       // 创建者名称
       *       createBy?: string
       *       // 创建时间
       *       createTime?: number
       *       // 更新者名称
       *       updateBy?: string
       *       // 最后更新时间
       *       updateTime?: number
       *       // 菜单名
       *       name?: string
       *       // 路径
       *       path?: string
       *       // 路径
       *       pathParam?: string
       *       layout?: 1 | 2
       *       // 重定向
       *       redirect?: string
       *       // 组件
       *       component?: string
       *       // 父级
       *       parentId?: number
       *       menuType?: 1 | 2 | 3 | 4
       *       iconType?: 1 | 2
       *       // 状态
       *       status?: boolean
       *       // 路由标题(可用来作document.title或者菜单的名称)
       *       title?: string
       *       // 多语言
       *       i18nKey?: string
       *       // 缓存页面
       *       keepAlive?: boolean
       *       // 当设置为true时，将不会进行登录验证，也不会进行访问路径的权限验证
       *       constant?: boolean
       *       // 菜单和面包屑对应的图标
       *       icon?: string
       *       // 使用本地svg作为的菜单和面包屑对应的图标(assets/svg-icon文件夹的的svg文件名)
       *       localIcon?: string
       *       // 菜单和面包屑对应的图标的字体大小
       *       iconFontSize?: number
       *       // 路由顺序，可用于菜单的排序
       *       order?: number
       *       // 外链链接
       *       href?: string
       *       // 是否在菜单中隐藏路线
       *       hideInMenu?: boolean
       *       // 当前路由需要选中的菜单项(用于跳转至不在左侧菜单显示的路由且需要高亮某个菜单的情况)
       *       activeMenu?: string
       *       // 是否支持多个tab页签(默认一个，即相同name的路由会被替换)
       *       multiTab?: boolean
       *       // 如果设置，路线将固定在制表符中，值是固定制表符的顺序
       *       fixedIndexInTab?: number
       *       props?: boolean
       *       // 是否已删除
       *       isDeleted?: boolean
       *       roles?: Array<Role>
       *       children?: Array<Menu>
       *     }>
       *     users?: Array<User>
       *   }>
       *   roleIds?: number[]
       *   password?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   code: string
       *   // [required]
       *   data: number
       *   // [required]
       *   msg: string
       *   // [required]
       *   success: boolean
       * }
       * ```
       */
      post_api_user_submit<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        }> & {
          data: UpdateUserParam;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          code: string;
          /**
           * [required]
           */
          data: number;
          /**
           * [required]
           */
          msg: string;
          /**
           * [required]
           */
          success: boolean;
        },
        'User.post_api_user_submit',
        Config
      >;
    };
  }

  var Apis: Apis;
}
